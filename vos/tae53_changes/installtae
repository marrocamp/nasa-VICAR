NOOP=noop	# MAC doesn't understand #! /bin/sh
# installtae.sh Version: @(#)installtae.sh	20.9 6/4/93 18:16:49
#
#		TAE Classic UNIX INSTALLATION COMMAND PROCEDURE
#	
#  NOTE: Keep a record of the installation by using 'tee':
#
#		installtaeclassic |& tee install.log
#
#  REQUIREMENTS:
#	Before starting this file, be sure your environment is set
#	up as follows:
#	    1. This file must be located in the top of the TAE Classic tree.
#	    2. The environment variable TAE must be set to the full
#	       path name of the top of the TAE Classic tree.
#
#  CHANGE LOG:
#  31-mar-94	(KRW)	Initial creation by lobotomizing installtae script..krw
#==============================================================================
#  SET UP SECTION.
#  This section asks the user to define the desired configuration
#  for this installation of TAE Classic.
#==============================================================================
#
# Define method for withholding NEWLINE from output of 'echo'.
# See if 'echo -n' echoes the -n. If so, use 'echo "\c"'.
if test `echo -n "" | awk '$1=="-n" {print "foobar"}'`
then
    CC1=
    CC2='\c'
else
    CC1='-n'
    CC2=
fi

VERSION="V5.3 "	#############     >>>>>>>>>>>>     MODIFY THIS FOR EACH RELEASE

echo ""
echo "      ***  INSTALLATION PROCEDURE FOR TAE Classic $VERSION  ***"
#------------------------------------------------------------------------------
#----------------  Check For Correct Current Environment  ---------------------
#------------------------------------------------------------------------------

if test $TAE && test -d $TAE && (cd / ; test -f $TAE/installtae) then

    echo ""
    echo "	** The top of the TAE Classic tree is $TAE **"

else
    echo " "
    echo "	The symbol TAE must be set to the full path name of "
    echo "	the top of the TAE Classic tree."
    echo " "
    echo "	This script file ($0) must be in the directory"
    echo "	pointed to by TAE."
    echo " "
    echo "	Make the assignment and restart install procedure."
    exit
fi

# assign basic TAE symbols
. $TAE/bin/sh/taesetup
. $TAE/bin/sh/taesetupsrc
. $TAE/bin/sh/taesetupclassic

# extend path as per TAE user
PATH="$TAEBIN:$PATH"
export PATH

IMAKE="tae.mkmf"
MAKE_STD_MACRO="TAE=$TAE"
PATHDIRS="`echo $PATH | sed 's/:/ /g' | sed 's/ . / /g'`"
#PATHDIRS="`echo $PATH | sed 's/:/ /g'`"

# Numerous config requirements are in the .cf and .tmpl files. If this shell 
# script were a Makefile instead, we would have these settings available.
# We can still make them available by ECHOing the assignments from 
# a generated Makefile into a dummy file containing the assignments. This
# file can then be read into the environment.
#
# NOTE that one such variable that gets set here is MAKE. This allows
# that MAKE can be defined in .tmpl file.
$IMAKE
make info $MAKE_STD_MACRO >tae.req
sed -e '/directory/d' tae.req >tae.req2
. ./tae.req2		# read in host platform config requirements
rm -f tae.req tae.req2

# If there is a record of the previous installation options, ask
# whether these should be used. If so, read them into the shell.
USEPREVIOUS=no
OPTFILE=$TAE/install.opt
if test -f $OPTFILE
then
    echo ""
    grep = $OPTFILE
    echo ""
    echo $CC1 \
       "Use the previous installation's selections above? ([Yes]/No/Quit): $CC2"
    read ANS; test $ANS || ANS=yes; ANS=`echo $ANS | tr "[A-Z]" "[a-z]"`
    until test `expr $ANS : [ynq].*` -gt 0
        do
        echo $CC1 "Enter Yes, No or Quit (or RETURN for default): $CC2"
        read ANS; test $ANS || ANS=yes
        ANS=`echo $ANS | tr "[A-Z]" "[a-z]"`
        done
    if test `expr $ANS : q.*` -gt 0
    then
      echo " "
      echo "      Installation terminated at user request."
      exit
    fi
    test `expr $ANS : y.*` -gt 0 && USEPREVIOUS=yes && . $OPTFILE
fi

#------------------------------------------------------------------------------
#----------------  Ask What TAE Options Are To Be Installed  ------------------
#------------------------------------------------------------------------------
#
if test $USEPREVIOUS = no
then
  echo ""
  echo "	You are going to be asked to select various TAE Classic options."
  echo ""
  echo "	After you answer all the questions, your responses will"
  echo "	be displayed so that you can check them and correct any"
  echo "	errors before the installation proceeds. "
  echo ""
  echo $CC1 "OK to continue? ([Yes]/No): $CC2"
  read ANS; test $ANS || ANS=yes; ANS=`echo $ANS | tr "[A-Z]" "[a-z]"`
  until test `expr $ANS : [yn].*` -gt 0
      do
          echo $CC1 "Enter Yes or No (or RETURN for default): $CC2"
          read ANS; test $ANS || ANS=yes
          ANS=`echo $ANS | tr "[A-Z]" "[a-z]"`
      done
  if test `expr $ANS : n.*` -gt 0
  then
      echo " "
      echo "      Installation terminated at user request."
      exit
  fi

#
#  Options Question Loop.
#  Parameters to aquire are:
#    DEMOS - build TAE Classic demos?
#    CLFORTBIND - Classic Fortran Bindings?
#
  ACCEPT=no
  until test `expr yes : $ACCEPT` -gt 0
  do
  { 
    # These are the defaults.
    DEMOS=yes
    CLFORTBIND=no

    #
    #-- Build TAE Plus Demos? ---------------------------------------
    #
    echo ""
    echo $CC1 \
      "Build TAE Plus demonstration programs? ([Yes]/No): $CC2"
    read DEMOS; test $DEMOS || DEMOS=yes
    DEMOS=`echo $DEMOS | tr "[A-Z]" "[a-z]"`
    until test `expr $DEMOS : [yn].*` -gt 0
       do
         echo $CC1 "Enter Yes or No (or RETURN for default): $CC2"
         read DEMOS; test $DEMOS || DEMOS=yes
         DEMOS=`echo $DEMOS | tr "[A-Z]" "[a-z]"`
       done
    if test `expr $DEMOS : y.*` -gt 0
    then
      DEMOS=yes
    else
      DEMOS=no
    fi

    #
    #-- Are Classic Fortran bindings desired? --------------------------------
    #
    echo " "
    echo $CC1  "Install TAE Classic Fortran bindings? (Yes/[No]): $CC2"
    read ANS
    test $ANS || ANS=no
    ANS=`echo $ANS | tr "[A-Z]" "[a-z]"`
    until test `expr $ANS : [yn].*` -gt 0
        do
        echo $CC1 "Enter Yes or No (or RETURN for default): $CC2"
        read ANS; test $ANS || ANS=no
        ANS=`echo $ANS | tr "[A-Z]" "[a-z]"`
        done
    if test `expr $ANS : y.*` -gt 0
    then
      CLFORTBIND=yes
    else
      CLFORTBIND=no
    fi

    # See if this is a change from the last installation.
    CLFORTCVT=true
    if [ -f $OPTFILE ]
    then
      PREVREC="`grep CLFORTBIND $OPTFILE`"
      test -n "$PREVREC" && RESPONSE=`echo $PREVREC | awk -F= '{ print $2 }'`
      test $CLFORTBIND = "$RESPONSE" && CLFORTCVT=false
    fi

    #
    #   Display all current option flags.
    #
    echo " "
    echo "        Verify the Following Options Selected:"
    echo ""
    echo "	** Installing TAE Classic demonstration programs: $DEMOS **"
    echo "	** Installing TAE Classic Fortran bindings:  $CLFORTBIND **"   
  
    echo " "
    echo $CC1 "Is the above information correct? $CC2"
    echo $CC1 "([Yes]/No/Quit): $CC2"
    read ANS
    test $ANS || ANS=yes; ANS=`echo $ANS | tr "[A-Z]" "[a-z]"`
    until test `expr $ANS : [ynq].*` -gt 0
      do
        echo $CC1 "Enter Yes, No, or Quit (or RETURN for default): $CC2"
        read ANS; test $ANS || ANS=yes
        ANS=`echo $ANS | tr "[A-Z]" "[a-z]"`
      done
    if test `expr $ANS : q.*` -gt 0
    then
      echo " "
      echo "      Installation terminated at user request."
      exit
    fi
    ACCEPT=no; test `expr $ANS : y.*` -gt 0 && ACCEPT=yes
  }
  done

  # Crack a file for maintaining TAE configuration options.
  rm -f $OPTFILE
  echo "#" >$OPTFILE
  echo "# $OPTFILE." >>$OPTFILE
  echo "#" >>$OPTFILE
  echo "# Record of choices for most recent TAE installation." >>$OPTFILE
  echo "# DO NOT DELETE THIS FILE." >>$OPTFILE 
  echo "#" >>$OPTFILE

  echo "	DEMOS=$DEMOS" >>$OPTFILE
  echo "	CLFORTBIND=$CLFORTBIND" >>$OPTFILE
fi

CONFIGERR=false
if test $TAEPLAT = UNKNOWN
then
  echo  "     Can't find the description of your host platform."
  echo "      Consult the file $TAE/bin/all/platform for more information."
  CONFIGERR=true
fi


#==============================================================================
#  PROCESSING SECTION.
#  Set up is complete at this point.  No more input is required.
#  Messages will be output to the terminal to inform the user
#  of progress.
#  Processing proceeds in the following steps:
#     Extraneous file cleanup
#     Platform preparation
#     Make Makefiles
#     Make all
#     Message file
#==============================================================================
#
echo " "
echo "  -------------------------------------------------------------------"
echo "  There will be no more questions.  Installation processing starting."
echo "       A first-time installation takes 10 minutes to an hour."
echo "                 `date`"
echo "  -------------------------------------------------------------------"
echo " "
#
if test $USEPREVIOUS = no
then
  rm -f $TAETM/tclwindows.o
  if test $CLFORTCVT = true
  # Remove Fortran objs in TGENLIB; we are adding or deleting Fortran bindings.
  then
    rm -f $TAETAELIB/wrtstd.o
    rm -f $TAETAELIB/xt.o
    rm -f $TAETAELIB/xzcall.o
    rm -f $TAETAELIB/xzinit.o
  fi
fi

#
#------------------------------------------------------------------------------
#--------------------------  Perform Special Tasks  ---------------------------
#------------------------------------------------------------------------------
#
# Update tree with checked-in PDF's, shell scripts, TAE scripts and other
# files that are not loaded into TM. (Only applies to Century.)
#


#
#------------------------------------------------------------------------------
#----------------  Create Platform Specific Sub-directories  ------------------
#------------------------------------------------------------------------------
#
test ! -d $TAEBIN && mkdir -p $TAEBIN
test ! -d $TAELIB && mkdir -p $TAELIB

test ! -d $TAEHELPINX && mkdir -p $TAEHELPINX

#
#------------------------------------------------------------------------------
#-----------------  Link Shell Scripts and Utilities to $TAEBIN  --------------
#------------------------------------------------------------------------------
#
    cd $TAEBIN		## = $TAE/bin/$TAEPLAT
    BIN_DIR=.
    SCRIPT_SRC_DIR=../all

    echo ""
    echo "	Linking shell scripts from ${SCRIPT_SRC_DIR} to $BIN_DIR..."
    echo ""
    for script in ${SCRIPT_SRC_DIR}/*
    do
        SCRIPT=`basename $script`
        if [ ! -f $BIN_DIR/$SCRIPT ]        # avoid file exists warning
        then
            if [ -x $script -a ! -d $script ]
            then
                echo "ln -s  $script $BIN_DIR/$SCRIPT"
                ln -s  $script $BIN_DIR/$SCRIPT
            fi
        fi
    done


    echo ""
    echo "	Linking Utilities from $TAE/util to $TAEBIN..."
    echo ""
    cd $TAEBIN          ## = $TAE/bin/$TAEPLAT
    BIN_DIR=.

    # ASSUMPTION: Dirname must match binary name.
    for UTILITY in imake	             # <==== ADD OTHER UTILTIES HERE
    do
	UTIL_DIR=../../util/$UTILITY	     # path relative to $TAEBIN
	if [ ! -s $BIN_DIR/$UTILITY ]        # avoid file exists warning
	then
		echo "ln -s  ${UTIL_DIR}/$UTILITY $BIN_DIR/$UTILITY"
		ln -s  ${UTIL_DIR}/$UTILITY $BIN_DIR/$UTILITY
	fi
    done

#
#------------------------------------------------------------------------------
#----------------------------  Create Include Files  --------------------------
#------------------------------------------------------------------------------
#        *********** CREATE INCLUDE FILE  $TAEINC/sitedef.inp ********** 
#
# Some compilers don't define these for the pre-processor pass.
if test $TAEPLAT = MACII 
then
  echo " "
  echo "	Create include file $TAEINC/sitedef.inp."

  cd $TAEINC
  chmod +w sitedef.inp
  echo "/* define the host architecture 		*/" >sitedef.inp
  if test $TAEPLAT = MACII
  then
    echo "#ifndef macII" >>sitedef.inp
    echo "#define macII" >>sitedef.inp
  fi
  echo "#endif" >>sitedef.inp
  echo "	Done."
fi

#
#------------------------------------------------------------------------------
#--------------------------  Build the Makefiles  -----------------------------
#------------------------------------------------------------------------------
#
#
cd $TAE
echo " "
echo "  Building all Makefiles for TAE source tree..."
$MAKE Makefiles

# do some special stuff for FORTRAN
    (cd $TAESRC/lib/tae; \
    $IMAKE -DCLFORTBIND="$CLFORTBIND")

#
#------------------------------------------------------------------------------
#--------------------------  Clean Previous Install  --------------------------
#------------------------------------------------------------------------------
#
if test -f install.platform ; then
	PLATPREV=`cat install.platform`
else
	PLATPREV="*** no plat ***"
fi

if test "$PLATPREV" = "`platform`" ; then
	echo " "
	echo "  Continuing with build of platform:" `platform`
else
	echo " "
	echo "  Cleaning files generated from previous installation..."
	$MAKE clean
	(cd $TAEDEMO; find . -name \*.o -exec rm -f {} \;)
	# For each special utility, remove the previous plat's version.
	# ASSUMPTION: Dirname must match binary name.
	# 
	echo " "
	echo "  Removing utilities from previous installation..."
	echo " "
        for UTILITY in imake               # <==== ADD OTHER UTILTIES HERE
	do
		rm -f $TAE/util/$UTILITY/$UTILITY
	done
fi
rm -f install.platform
platform > install.platform

#
#------------------------------------------------------------------------------
#--------------------------  Build the Libraries  -----------------------------
#------------------------------------------------------------------------------
#
#	ASSUMPTION:	You must add new SUBDIRS to $TAESRC/lib/Imakefile...kbs
#
echo " "
echo "  Building and installing the libraries..."
(cd $TAESRC/lib; $MAKE install)

#------------------------------------------------------------------------------
#-----------------------------  Build programs  -------------------------------
#------------------------------------------------------------------------------
#
#*************** Bin PROGRAMS ***********************
#
echo ""
echo "	Create Bin programs."
cd $TAESRC/bin; $MAKE install

#
#**********  BUILD THE TAE MONITOR  *****************
#
echo ""
echo "	Building the TAE Monitor program (TM)."

    WINLIB_MACRO="WPTDEPLIBS= WPTLINKLIBS= XWINLIBS= IVLIBS="
    XWINDOWS=""

(cd $TAETM;
$MAKE version install $WINLIB_MACRO XWINDOWS=$XWINDOWS VERSION="$VERSION")


#
#****************** DEMO PROGRAMS ***********************
#
# Always build classic demos.
#
if test $DEMOS = yes
then
  echo " "
  echo "	Building TAE Classic Demonstration programs."
  (cd $TAEDEMOCLASSIC/ctests; $IMAKE; $MAKE version install VERSION="$VERSION")
  if test $CLFORTBIND = yes
  then
    (cd $TAEDEMOCLASSIC/ftests; $IMAKE; $MAKE VERSION="$VERSION") 
  fi
fi

#
# The cat pages should be built on a real Sun (SunoOS or Solaris), too.
#
if test "`uname`" = SunOS
then
  cd $TAE/man
  # Removing cat versions guarantees files which use .so (includes)
  # will be updated if their .so file changed.
  echo " "
  echo "        Removing old cat versions of Man Pages...."
  if test -f $TAE/man/whatis
  then
    mv $TAE/man/whatis $TAE/man/whatis.save
  fi
  rm -rf $TAE/man/cat?
  echo " "
  echo "        Running catman for Man Pages...please wait."
  /usr/etc/catman -M . 135
  echo "        $TAE/man catman completed "
else
  echo "catman not automatically run for this platform."
  echo "Please refer to the TAE Classic release notes for"
  echo "more information."
fi


echo "	***** TAE INSTALLATION COMPLETED `date` ****"
echo ""
echo "	Check above for possible installation errors."
echo "	If any are found, correct them and re-run $0."
exit
