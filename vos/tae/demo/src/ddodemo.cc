// *** TAE Plus Code Generator version V5.2 Beta ***
// *** File:        ddodemo.cc ***
// *** Generated:   Oct  2 17:11:14 1992 ***
///////////////////////////////////////////////////////////////////////
//
// A Program generated by the TAE Plus WorkBench:
//
// To turn this into a real application, do the following:
//
// 1.  Each panel that has event generating items has a class
// named by appending the string "C" with the panel name.  Each
// "event-generating" item has an event handler function, React.
// Add application-dependent logic to each event handler.  (As
// generated by the WorkBench, each event handler simply logs the
// occurrence of the event.) 
//
// 2.  To build the program, you may use the TAE supplied shell script:
//
//               taec++one  ddodemo.cc
//
//
// The taec++one shell script creates a makefile in your current
// directory that may require some site specific modification.  Site
// wide modifications may be made by having your TAE system manager
// change the files in $TAE/config.
//
//
// ADDITIONAL NOTES:
// 1.  Each event handler has one argument: the actual wptevent
//
// 2.  You gain access to non-event items by calling the TaeVar
// and TaeVarTable methods using the instances of TaeVar and TaeVarTable
// associated with the panel.
//
// CHANGE LOG:
//  2-Oct-92    Initially generated...TAE
//  5-oct-92	Use C++ linker if USE_CPLUSPLUS_LINKER is defined...rt
// 14-oct-92	SGI requires including stdlib.h when using rand()...rt
// 19-oct-92	The above fix should be for all systems. Also removed
//		include of stream.h, not needed here and we want to
//		build without the C++ system libraries...krw
//
///////////////////////////////////////////////////////////////////////

// (+) ADDED
#include <stdlib.h>
// (-)
#include <taepanel.h>
#include <taeitem.h>
#include <taevm.h>
#ifndef USE_CPLUSPLUS_LINKER
#include "cplusplus_stubs.h"
#endif

// (+) ADDED krw
#if defined (hpux) || defined(VMS) || defined(sgi)
#include        "time.h"
#endif
#ifdef VMS
#define DDODEMO_RES "$TAEDEMORES:ddodemo.res"
#else
#define DDODEMO_RES "$TAEDEMORES/ddodemo.res"
#endif
// (-)

//
// Global Data
//
Display *defaultDisplay;
TaeEventHandler *eventHandler;

//
// Panel Classes
//
class ddodemoC;

// (+) ADDED krw
class clockTimerC;

clockTimerC *clockTimer;		// timer for clock rotator
// (-)

//
// Panel Instances
//
ddodemoC	*ddodemoP;

//
// Item React Function Prototypes
//
static void ddodemo_chgall_React(TaeItem *, WptEvent *);
static void ddodemo_chgdx2_React(TaeItem *, WptEvent *);
static void ddodemo_chgmv1_React(TaeItem *, WptEvent *);
static void ddodemo_chgmv2_React(TaeItem *, WptEvent *);
static void ddodemo_chgrx2_React(TaeItem *, WptEvent *);
static void ddodemo_chgsc1_React(TaeItem *, WptEvent *);
static void ddodemo_chgsx1_React(TaeItem *, WptEvent *);
static void ddodemo_chgsx2_React(TaeItem *, WptEvent *);
static void ddodemo_novalue_React(TaeItem *, WptEvent *);
static void ddodemo_panelreset_React(TaeItem *, WptEvent *);
static void ddodemo_quit_React(TaeItem *, WptEvent *);

// (+) ADDED krw
//
// Define a sub-class of the TaePanelTimer
//
class clockTimerC : public TaePanelTimer
    {
public:
    clockTimerC ();

protected:

    //
    // This method will be called when the event occurs
    //
    virtual int HandleEvent( const TaeEventHandler& );
    };
// (-)

///////////////////////////////////////////////////////////////////////
//
// ddodemoResource contains methods that have implication on the
// resource file ddodemo.res.

class ddodemoResource : public TaeResource
    {
public:

// (+) ADDED cew (actually, modified to look for res file in the right place
    ddodemoResource () : TaeResource (DDODEMO_RES) {};
// (-)
    ~ddodemoResource () {};

    
    void Initialize_All_Panels ();
    void Create_Initial_Panels ( const TaeEventHandler& );
    };

///////////////////////////////////////////////////////////////////////
//
// panel class definitions
//

//********************************************************************
class ddodemoC : public TaePanel
    {
public:
    
    ddodemoC (TaeCollection *collect) : TaePanel ("ddodemo", collect)
        {
        //
        //  create an instance of each item in the panel.
        //
        new TaeItem (this, "chgall", &ddodemo_chgall_React);
        new TaeItem (this, "chgdx2", &ddodemo_chgdx2_React);
        new TaeItem (this, "chgmv1", &ddodemo_chgmv1_React);
        new TaeItem (this, "chgmv2", &ddodemo_chgmv2_React);
        new TaeItem (this, "chgrx2", &ddodemo_chgrx2_React);
        new TaeItem (this, "chgsc1", &ddodemo_chgsc1_React);
        new TaeItem (this, "chgsx1", &ddodemo_chgsx1_React);
        new TaeItem (this, "chgsx2", &ddodemo_chgsx2_React);
        new TaeItem (this, "novalue", &ddodemo_novalue_React);
        new TaeItem (this, "panelreset", &ddodemo_panelreset_React);
        new TaeItem (this, "quit", &ddodemo_quit_React);
        }
    
    ~ddodemoC () {}	// TaeItems deleted in TaePanel destructor
    };



// (+) ADDED krw
////////////////////////////////////////////////////////////////
//
clockTimerC::clockTimerC ()
    {
    eventHandler->Register (this,
			    1000,		// 1 second in milliseconds
			    TRUE,		// repeat forever
			    NULL);		// no data necessary
    }

////////////////////////////////////////////////////////////////
//
clockTimerC::HandleEvent( const TaeEventHandler& )
    {
	// holds the three values for the clock rotator
	// [0] = hours
	// [1] = minutes
	// [2] = seconds
    TAEFLOAT hhmmss[3];
    long timeNow;
    struct tm *time_ptr;

    time(&timeNow);				// get current time
    time_ptr = (struct tm *)localtime(&timeNow); // get hh, mm, ss
    hhmmss[1] = TAEFLOAT (time_ptr->tm_min);
    hhmmss[2] = TAEFLOAT (time_ptr->tm_sec);
 
    // the proper display of the Hour hand is a bit tricky
    // If you look at an analog clock you will see that most of the time
    // the Hour hand is not pointing straight a number. Its position is
    // dependent on the current minute.
    // The "60.0/12.0" is used because the DDO's range is 0 to 60.
    // and there are 12 hours in that range.
    // The time is reported as a 24 hour clock, so we modulo by 12 to
    // get the 12 hour clock the DDO resembles.
    hhmmss[0] = 60.0/12.0 * (TAEFLOAT(time_ptr->tm_hour % 12) +
			     TAEFLOAT (time_ptr->tm_min)/60.0);

    ddodemoP->Update("rx1", 3, hhmmss);		// update the clock
    return 0;
    }
// (-)

///////////////////////////////////////////////////////////////////////
//
//  main program
//

main()
    {
    COUNT tlines, tcols;
    CODE  ttype;
    
    f_force_lower (FALSE);                  // permit upper/lowercase file names
    t_pinit (&tlines, &tcols, &ttype);      // initialize terminal pkg
    
#ifdef USE_CPLUSPLUS_LINKER
    defaultDisplay = Wpt_CCInit (NULL);
#else
    defaultDisplay = Wpt_Init (NULL);
#endif
    
    eventHandler = new TaeEventHandler();
    
    ddodemoResource *ddodemoR = new ddodemoResource();
    
    // Initialize all panel instances
    
    ddodemoR->Initialize_All_Panels();

    // Create and display initial panel set
    
    ddodemoR->Create_Initial_Panels( *eventHandler );

// (+) ADDED krw
    clockTimer = new clockTimerC();
// (-)

    eventHandler->ProcessEvents();          // Start event processing
    
    Wpt_Finish();                           // Close all display connections;
    }


///////////////////////////////////////////////////////////////////////
//
// Create an instance of all panels
//
void ddodemoResource::Initialize_All_Panels ()
    {
    ddodemoP = new ddodemoC ( Collection() );
    }

///////////////////////////////////////////////////////////////////////
//
// Display the initial panel set
//
void ddodemoResource::Create_Initial_Panels(const TaeEventHandler& eventHandler)
    {
    ddodemoP->Show(eventHandler);
    }


///////////////////////////////////////////////////////////////////////
//
//  item React Functions for handling events
//

//********************************************************************
// Event Handler
static void ddodemo_chgall_React (TaeItem *theItem, WptEvent* event)
    {
// (+) ADDED krw
    TaePanel *theParentPanel = theItem->Parent();
    TAEFLOAT chgallValue = theItem->Real();
    TAEFLOAT setValue;			// actual value to set the ddo to
 
	// update each scale and DDO with the new value
	// First check to make sure don't go over maximum of the ddo
    setValue = min(theParentPanel->Real("chgsx1", "maximum"), chgallValue);
    theParentPanel->Update("chgsx1", setValue);
    theParentPanel->Update("sx1", setValue);

    setValue = min(theParentPanel->Real("chgsx2", "maximum"), chgallValue);
    theParentPanel->Update("chgsx2", setValue);
    theParentPanel->Update("sx2", setValue);

    setValue = min(theParentPanel->Real("chgrx2", "maximum"), chgallValue);
    theParentPanel->Update("chgrx2", setValue);
    theParentPanel->Update("rx2", setValue);

    setValue = min(theParentPanel->Real("chgdx2", "maximum"), chgallValue);
    theParentPanel->Update("chgdx2", setValue);
    theParentPanel->Update("dx2", setValue);

    setValue = min(theParentPanel->Real("chgmv1", "maximum"), chgallValue);
    theParentPanel->Update("chgmv1", setValue);
    theParentPanel->Update("mv1", setValue);

    setValue = min(theParentPanel->Real("chgmv2", "maximum"), chgallValue);
    theParentPanel->Update("chgmv2", setValue);
    theParentPanel->Update("mv2", setValue);

// The stripchart we will handle differently. Rather than duplicate the
// code for the update of the stripchart's three values, we will update
// the controlling scale item and call its react function to update the
// stripchart.
    setValue = min(theParentPanel->Real("chgsc1", "maximum"), chgallValue);
			// stripchart...only update one value
    TaeItem *chgsc1 = theParentPanel->GetItem("chgsc1");

    chgsc1->Update(setValue);			// update the scale item
    (*chgsc1->ReactCB())(chgsc1, event);	// call the react method
// (-)
    }

//********************************************************************
// Event Handler
static void ddodemo_chgdx2_React (TaeItem *theItem, WptEvent* event)
    {
// (+) ADDED krw
    theItem->Parent()->Update("dx2", theItem->Real()); 
// (-)
    }

//********************************************************************
// Event Handler
static void ddodemo_chgmv1_React (TaeItem *theItem, WptEvent* event)
    {
// (+) ADDED krw
    theItem->Parent()->Update("mv1", theItem->Real()); 
// (-)
    }

//********************************************************************
// Event Handler
static void ddodemo_chgmv2_React (TaeItem *theItem, WptEvent* event)
    {
// (+) ADDED krw
    theItem->Parent()->Update("mv2", theItem->Real()); 
// (-)
    }

//********************************************************************
// Event Handler
static void ddodemo_chgrx2_React (TaeItem *theItem, WptEvent* event)
    {
// (+) ADDED krw
    theItem->Parent()->Update("rx2", theItem->Real()); 
// (-)
    }

//********************************************************************
// Event Handler
static void ddodemo_chgsc1_React (TaeItem *theItem, WptEvent* event)
    {
// (+) ADDED krw
    TAEFLOAT	scValues[3];		// one value per stripchart line
    TAEFLOAT	itemMax = (*theItem)["maximum"].Real();
    
    scValues[0] = theItem->Real();	// first line always the value

    scValues[1] = TAEFLOAT(rand() % int (itemMax));
    scValues[2] = TAEFLOAT(rand() % int (itemMax));
    theItem->Parent()->Update("sc1", 3, scValues);
// (-)
    }

//********************************************************************
// Event Handler
static void ddodemo_chgsx1_React (TaeItem *theItem, WptEvent* event)
    {
// (+) ADDED krw
    theItem->Parent()->Update("sx1", theItem->Real()); 
// (-)
    }

//********************************************************************
// Event Handler
static void ddodemo_chgsx2_React (TaeItem *theItem, WptEvent* event)
    {
// (+) ADDED krw
    theItem->Parent()->Update("sx2", theItem->Real()); 
// (-)
    }

//********************************************************************
// Event Handler
static void ddodemo_novalue_React (TaeItem *theItem, WptEvent* event)
    {
// (+) ADDED krw
    TaePanel *theParentPanel = theItem->Parent();

    theParentPanel->SetNoValue("sx1");
    theParentPanel->SetNoValue("sx2");
    theParentPanel->SetNoValue("rx2");
    theParentPanel->SetNoValue("sc1");
    theParentPanel->SetNoValue("dx2");
    theParentPanel->SetNoValue("mv1");
    theParentPanel->SetNoValue("mv2");
// (-)
    }

//********************************************************************
// Event Handler
static void ddodemo_panelreset_React (TaeItem *theItem, WptEvent* event)
    {
// (+) ADDED krw
    theItem->Parent()->Reset();
// (-)
    }

//********************************************************************
// Event Handler
static void ddodemo_quit_React (TaeItem *theItem, WptEvent* event)
    {
// (+) ADDED krw
    Wpt_Finish();
    exit(1);
// (-)
    }
