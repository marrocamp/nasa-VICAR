/* attach_do - subroutine to attach to or spawn the specified process
 *            Kurt Andersen (KKA059) at JPL  11 June 1987
 */

#include "stdh.inp"		/* system standard  (REQUIRED)		*/
#include "taeconf.inp"		/* TAE configuration (REQUIRED)		*/

#include "parblk.inc"		/* parameter block definitions		*/
#include "symtab.inc"		/* TM symbol table			*/
#include "tminc.inc"		/* TM definitions			*/

#include "vicartae.inc"		/* VICAR-specific definitions		*/

#include <ssdef.h>
#include <descrip.h>
#include <jpidef.h>

    FUNCTION CODE attach_do(procctx, cmdctx)

    struct CONTXT *procctx;	/* in/out: enclosing proc contxt	*/
    struct CONTXT *cmdctx;	/* in/out: command contxt		*/

    {
    struct VARIABLE	*p;	/* variable for PROCESS */

    static char par_proc_name[16];		/* parent proc name (c str) */
    static char pnam[16];			/* proc name (c str)	    */
    static $DESCRIPTOR(process_name, pnam);	/* proc name (descrip)	    */
    TEXT msgbuf[80];				/* buffer for messages	    */
    int stat;					/* status return	    */
    int pid;                                    /* process id number        */
    short int ret_len;
    struct jpi_struct                           /* Needed by GETJPI         */
    {
	short int length;
	short int item_code;
	int       *p;
	int       return_length;
	int       terminate;
    };
                                                        
    struct jpi_struct jpi[] = 
    {
	{4, JPI$_PID, &pid, 0, 0},
	{16, JPI$_PRCNAM, par_proc_name, &ret_len, 0}
    };


/* get the parent process name	*/
    stat = sys$getjpiw( 0, 0, 0, &jpi[1], 0, 0, 0);
    if (stat != SS$_NORMAL)
    {
	sprintf(msgbuf,"Error returning parent process name, host code = %d",stat);
	put_stdout(msgbuf);
	put_stdout("[Attached to VICAR]");
	return;
    }
    par_proc_name[ret_len] = '\0';		/* assure null terminator */

/* put together the subprocess name 	*/
    p = lookex(&(*cmdctx).parmst, "PROCESS");

    if ((*p).v_count == 0) 			/* No process specified */
        sprintf(pnam, "%.13s_1", par_proc_name);
    else 
        sprintf(pnam, "%s", SVAL(*p,0));

    process_name.dsc$w_length = strlen(pnam);

/* get the PID of the subprocess if it exists */
    stat = sys$getjpiw( 0, 0, &process_name, &jpi[0], 0, 0, 0);
    if (stat == SS$_NORMAL)	/* if process already exists, attach to it */
    {
	sprintf(msgbuf, "[Attaching to process: %s]", pnam);
        put_stdout(msgbuf);
	stat = lib$attach(&pid);
	if (stat != SS$_NORMAL)
	{
	    sprintf(msgbuf,
		"You cannot attach to that process, host code = %d", stat);
	    put_stdout(msgbuf);
	    return;
	}
    }
    else
    {
        put_stdout("[Spawning new DCL subprocess]");
	stat = lib$spawn(0,0,0, &0, &process_name);
	if (stat != SS$_NORMAL)
	{
	    sprintf(msgbuf, "Cannot spawn DCL process, host code = %d",stat);
	    put_stdout(msgbuf);
	}
    }
    put_stdout("[Attached to VICAR]");
    return;
}
