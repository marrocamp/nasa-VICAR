/*++
*
* FACILITY:	TM - (TAE TERMINAL MONITOR)
* MODULE:	RM - Resource Usage Monitoring Package
* 
* ABSTRACT:
* 
*	This file contains the procedures that comprise the resource monitoring
*	package.
*
* CHANGE LOG:
*
*	27-jun-83 	Initial Field Release...cb
*	08-dec-83	Remove greetings...peb
* 		JPL modifications
*
*  13-MAR-84 (PEB)	Indent rm display for batch, add trailer line of "-"s
*  15-MAR-84 (PEB)	Extend trailer line clear accross
*
--*/



#include "stdh.inp"		/* standard C definitions		*/
#include "taeconf.inp"		/* TAE configuration definitions	*/

#include "tminc.inc"		/* TM-only host-independent definitions	*/
#include "taskinc.inp"		/* c_ definitions and structures  	*/
#include "symtab.inc"		/* TM symbol table			*/

#include "vicartae.inc"		/* VICAR-specific definitions		*/

#include <jpidef.h>		/* Declare $GETJPI symbols		*/
#include <rms.h>		/* Declare all RMS data structures	*/
#include <descrip.h>		/* date - time descriptor		*/


	GLOBAL  v08rm = 0;			/* source version number */

GLOBAL struct TCB	initcb;		/* global tcb for subprocess */


/* Data Structure Definitions */

typedef struct				/* Define Usage Vector */	
    {
    unsigned long	realtim;	/* real time (10 millisec units)*/
    unsigned long	cputim;		/* cpu time (10 millisec units)	*/
    unsigned long	bufio;		/* bufferred i/o operations	*/
    unsigned long	dirio;		/* direct i/o operations	*/
    unsigned long	pageflts;	/* page faults 			*/
    } t_use_vec;

#define	PROC_MAX	9		/* max length for TAE proc name */
#define	USER_MAX	12		/* max length for VMS user name */
#define LEVEL_MAX	20		/* max proc level available for RM */
#define	RM_INDENT_TABS	4		/* no. tabs to indent for batch log*/
#define RM_TRAIL_CHARS	130		/* no dashes in trailer line	*/

#define ACC_FMT_VER	1		/* Account Record Format Version */
typedef struct				/* Define Accounting Record */	
    {
    char		fmtver;		/* record format version level */
    char		uname[USER_MAX];	/* user name (LJBF) */
    char		pname[PROC_MAX];	/* last proc name (LJBF) */
    char		fill[2];	/* fill characters */
    long		pstart[2];	/* date/time of proc start */
    long		sfi;		/* $SFI value for last proc */
    t_use_vec		suv;		/* session usage vector */
    t_use_vec		puv;		/* last proc usage vector */
    } t_acc_rec;

/* NOTE:  Current format version is ACC_FMT_VER (see above)
DEFINE RECORD ACC_REC USING
01 ACC_REC.
   02 FMT_VER		USAGE IS BYTE.
   02 USER_NAME		PIC X(12).
   02 PROC_NAME		PIC X(9).
   02 FILLER		PIC X(2).
   02 PROC_START	USAGE IS DATE.
   02 SFI		USAGE IS LONG.
   02 SESSION_USAGE.
      03 REALTIME	USAGE IS LONG, SCALE IS -2.
      03 CPUTIME	USAGE IS LONG, SCALE IS -2.
      03 BUFIO		USAGE IS LONG.
      03 DIRIO		USAGE IS LONG.
      03 PAGEFLTS	USAGE IS LONG.
   02 PROC_USAGE.
      03 REALTIME	USAGE IS LONG, SCALE IS -2.
      03 CPUTIME	USAGE IS LONG, SCALE IS -2.
      03 BUFIO		USAGE IS LONG.
      03 DIRIO		USAGE IS LONG.
      03 PAGEFLTS	USAGE IS LONG.
*/



/* Global variables and definitions */
   
globaldef long		rm_debug=0;	/* debug flag */
GLOBAL CODE		run_type;		/* run mode (BATCH etc) */
GLOBAL struct VARIABLE	*sfi_gbl;	/* pointer to SFI variable */

/* Module-wide variables and definitions */

static long		g_acclog;	/* accounting enabled flag */
static long		g_shallow;	/* bottom proc level for accounting */

static long		g_sstart_qt[2];	/* session start time - quadword */
static long		g_pstart_qt[LEVEL_MAX][2];/* proc start time - quadword */

static t_use_vec	g_sstart_uv;	/* session start usage vector */
static t_use_vec	g_stotal_uv;	/* session total usage vector */

static t_use_vec	g_pstart_uv[LEVEL_MAX];/* proc start usage vector */
static t_use_vec	g_ptotal_uv[LEVEL_MAX];	/* total proc usage (stop-start) */
static char		g_pname[LEVEL_MAX][PROC_MAX+1];	/* proc name (with EOS) */
static char		g_pstart_datetime[LEVEL_MAX][21]; /* date and time of proc start */

t_acc_rec		g_acc_rec;	/* account record buffer */
static char		prm_filename[]="TAE$USAGE$FILE"; /* acc file name */
static struct FAB	tmp_fab,prm_fab;	/* FABs for account files */
static struct RAB	tmp_rab,prm_rab;	/* RABs for account files */
static long		prm_keybuf;		/* key buffer: rel rec #  */
t_acc_rec		prm_header;		/* perm acct file header buf*/

static long		exit_status;
static long		rm_exit_handler();
static long		exit_block[4] = {0,rm_exit_handler,1,&exit_status};



    FUNCTION VOID rm_init (p_ctx)
/*
* DESCRIPTION:
*
*	This routine initializes the RM package.  The following steps are
*	performed:
*
*	- declare exit handler
*	- determine if BATCH
*	- set flags based on mode (auto-display, acc-log, acc-level)
*	- save session start values
*	- display initialization message
*/

struct CONTXT		*p_ctx;		/* level-0 context block */

{
long		status,i;
    
status = SYS$DCLEXH (&exit_block);	/* declare exit handler */
if ((status&1)!=1) rm_fail ("rm_init","sys$dclexh",status);

if (run_type == BATCH)			/* check for BATCH */
    g_shallow=2;		/* set the shallowest level of proc for */
else				/* which to keep usage statistics, 	*/
    g_shallow=1;

g_acclog = 0;				/* disable accounting */


SYS$GETTIM (&g_sstart_qt);		/* session start time */
for (i = 0; i < LEVEL_MAX; i++)
    rm_clear_uv (&g_ptotal_uv[i]);	/* zero last-proc uvs */
rm_clear_uv (&g_sstart_uv);		/* clear session start uv for next call */
rm_getcum (&g_sstart_uv);		/* get session start usage vector */
					/* tricky, was 0, now not */
if (g_acclog) rm_init_acc ();		/* initialize accounting file logic */
/*** Nominal messages commented out.
 * rm_printf ("\nResource Monitor Initialized");
 * rm_printf ("- Auto Display %s", (g_autodis ? "Enabled" : "Disabled"));
 * rm_printf ("- Account Logging %s", (g_acclog ? "Enabled" : "Disabled"));
 ****/
return;
}



    FUNCTION VOID rm_term ()
/*
* DESCRIPTION:
*
*	This routine performs session termination processing for the
*	RM package.
*
*/


{
long		status;

status = SYS$CANEXH (&exit_block);	/* cancel exit handler */
if (g_acclog) rm_term_acc ();		/* accounting file wrapup */
return;
}


    static FUNCTION VOID rm_exit_handler (p_status)
/*
* DESCRIPTION:
*
*	This routine is invoked by VMS if the TM process is terminated
*	abnormally (such as by control-Y or access violation).  The
*	purpose of this routine is to ensure that accounting records are
*	properly written to the accounting file.
*/

long		*p_status;

{
/***** Nominal messages commented out
 * rm_printf ("");
 * rm_printf ("*** Resource Monitor Exit Handler ***");
 *****/
rm_term ();				/* invoke rm term logic */
return;
}



    FUNCTION VOID rm_pa (p_ctx)
/*
* DESCRIPTION:
*
*	This routine is called prior to activation of each proc.
*/

struct CONTXT		*p_ctx;		/* proc context block */

{
COUNT			level;		/* nesting level of current proc */

level = (*p_ctx).prclevel;
if ((level < LEVEL_MAX) && (level >= g_shallow))
    {
    rm_get_datetime (&g_pstart_datetime[level][0]);/* save proc start date/time string */
    rm_getcum (&g_pstart_uv[level]);		   /* save proc start usage */
    SYS$GETTIM (&g_pstart_qt[level][0]);	   /* save proc start date/time */
    }
return;
}


    FUNCTION VOID rm_pt (p_ctx)
/*
* DESCRIPTION:
*
*	This routine is called after termination of each proc.
*/

struct CONTXT		*p_ctx;		/* proc context block */

{
t_use_vec		cur_uv;		/* current usage vector */
COUNT			level;		/* nested level of proc */

level = (*p_ctx).prclevel;
if ((level < LEVEL_MAX) && (level >= g_shallow))
    {
    rm_getcum (&g_stotal_uv);				/* total session use */
    rm_sub_uv (&g_stotal_uv,&g_pstart_uv[level],
               &g_ptotal_uv[level]);			/* total proc use */
    strcpy (&g_pname[level][0],(*p_ctx).pdf.name);	/* copy proc name */
    g_acc_rec.sfi = IVAL (*sfi_gbl,0);		/* copy proc SFI */
    if (rm_autodisplay(level))
	rm_display_usage(level);	/* display usage */
    if (g_acclog) rm_write_acc(level);		/* write accounting record */
    }
return;
}


    FUNCTION VOID rm_get_datetime (datetime)
/*
* DESCRIPTION:
*
*	This routine returns the current date and time as a 
*	readable string for display
*/
    char datetime[21];		/* out: date-time string	*/

{
    static struct dsc$descriptor dt_desc = {20,DSC$K_DTYPE_T,DSC$K_CLASS_S,0};

    dt_desc.dsc$a_pointer = datetime;
    LIB$DATE_TIME (&dt_desc);
    datetime[20] = '\0';		/* Guarantee Null terminator */
    return;
}

    FUNCTION CODE rm_do_usage (procctx, cmdctx)
/*
* DESCRIPTION:
*
*	This routine is invoked by the intrinsic commands "USAGE"
*	and "USAGE-SHOW".
*
*/

struct CONTXT	*procctx;	/* in: proc context	*/
struct CONTXT	*cmdctx;	/* in: cmd context	*/
{
COUNT		level;		/* level or depth of current proc */

level = (*cmdctx).prclevel;
if ((level < LEVEL_MAX) && (level >= g_shallow))
    {
    rm_getcum (&g_stotal_uv);		/* total sessions usage */
    rm_display_usage(level);		/* display usage */
    }
else
    {
    rm_printf("\nProcs nested too deep for USAGE command.");
    }
return;
}
    


    FUNCTION VOID rm_init_acc ()
/*
* DESCRIPTION:
*
*	This routine performs initialization for account logging.  The
*	following steps are performed:
*
*	- setup account record static fields
*	- setup temp file FAB/RAB
*	- setup perm file FAB/RAB
*	- verify perm file is accessible
*/

{
struct		item			/* define item for $GETJPI call	*/
    {
    unsigned short	len;		/* length of buffer (bytes)	*/
    unsigned short	code;		/* item code			*/
    unsigned long	*addr;		/* buffer address		*/
    unsigned long	*retlenaddr;	/* addr of returned len longword */
    };

static struct item	itmlst[2] = 	/* $GETJPI item list	*/
	{
	{USER_MAX,JPI$_USERNAME,&g_acc_rec.uname,0},
	{0,0,0,0},
	};

long			status,iosb[2];


/* SETUP ACCOUNT RECORD */

g_acc_rec.fmtver = ACC_FMT_VER;		/* record format version level */
status = SYS$GETJPI (SYNCH_EFN,0,0,&itmlst,iosb,0,0);	/* get USERNAME */
if ((status&1)!=1) rm_fail ("rm_init_acc","sys$getjpi",status);

/* SETUP TEMP FILE STRUCTURES */

tmp_fab = cc$rms_fab;			/* fill in default FAB values */
tmp_rab = cc$rms_rab;			/* fill in default RAB values */

tmp_fab.fab$b_fac = (FAB$M_PUT | FAB$M_GET);	/* file access */
tmp_fab.fab$l_fop = (FAB$M_TMD			/* temp/marked for delete */
		     	| FAB$M_SQO);		/* sequential access only */

tmp_rab.rab$l_fab = &tmp_fab;			/* link RAB to FAB */

tmp_rab.rab$l_rbf = &g_acc_rec;			/* record addr (PUT) */
tmp_rab.rab$l_ubf = &g_acc_rec;			/* record addr (GET) */
tmp_rab.rab$w_rsz = sizeof(t_acc_rec);		/* record size (PUT) */
tmp_rab.rab$w_usz = sizeof(t_acc_rec);		/* record size (GET) */

/* SETUP PERM FILE STRUCTURES */

prm_fab = cc$rms_fab;			/* fill in default FAB values */
prm_rab = cc$rms_rab;			/* fill in default RAB values */

prm_fab.fab$b_fac = (FAB$M_PUT | FAB$M_GET);	/* file access */
prm_fab.fab$l_fna = &prm_filename;		/* file name addr */
prm_fab.fab$b_fns = strlen(prm_filename);	/* file name size */

prm_rab.rab$l_fab = &prm_fab;			/* link RAB to FAB */
prm_rab.rab$l_kbf = &prm_keybuf;
prm_rab.rab$b_rac = (RAB$C_KEY);		/* keyed (rel rec #) access */
prm_rab.rab$l_rop = (RAB$M_UIF);		/* open for interior rec update*/
prm_rab.rab$l_ubf = &prm_header;		/* we'll read the header (GET)*/
prm_rab.rab$w_usz = sizeof(t_acc_rec);
						/* NOTE: the PUT buffer addr...*/
						/* can't be established until...*/
						/* the GET is done	    	*/

/* OPEN TEMP FILE */

status = sys$create (&tmp_fab);    		/* create file */
if ((status&1) != 1) goto acc_fail;

status = sys$connect (&tmp_rab);    		/* connect RAB to FAB */
if ((status&1) != 1) goto acc_fail;

/* VERIFY PERM FILE ACCESSIBLE */

status = rm_acc_open_perm ();			/* open perm acc file */
if ((status&1) != 1) goto acc_fail;
sys$close (&prm_fab);				/* close perm file */

return;
acc_fail:
    rm_acc_fail (status);
    return;
}



    FUNCTION VOID rm_term_acc ()
/*
* DESCRIPTION:
*
*	This routine performs termination processing for accounting file
*	logging.  The following steps are performed:
*
*	- rewind temp file
*	- open perm file & read header
*	- copy records from temp to perm
*	- write perm file header back to file
*	- close parm and temp files
*/

{
long			i,status;
long			num_accrec;		/* max # acctg recs.	     */
long			last_rec;		/* last relat rec # written  */

if (g_acclog==0) goto wrapup;

status = sys$rewind (&tmp_rab);			/* rewind temp file */
if ((status&1) != 1) goto acc_fail;

status = rm_acc_open_perm ();			/* open perm accounting file */
if ((status&1) != 1) goto acc_fail;
prm_keybuf = 1;
status = sys$get(&prm_rab);			/* get perm file header	*/
num_accrec = prm_header.sfi;			/* cheated: housekeeping info...*/
last_rec   = prm_header.suv.bufio;		/* in these acctg rec members */

prm_rab.rab$l_rbf = &g_acc_rec;			/* acctg record addr (PUT)*/
prm_rab.rab$w_rsz = sizeof(t_acc_rec);		/* acctg record size (PUT)*/
copy_loop:
    status = sys$get (&tmp_rab);		/* get rec from temp file */
    if (status != RMS$_EOF)
    	{
	if ((status&1) != 1) goto acc_fail;
	prm_keybuf = (last_rec >= num_accrec+1) ?  2 : last_rec+1;
        status = sys$put (&prm_rab);		/* write to perm file */
	if ((status&1) != 1) goto acc_fail;
	last_rec = prm_keybuf;
    	goto copy_loop;
    	}

prm_header.suv.bufio = last_rec;		/* update last record in header	*/
SYS$GETTIM(&prm_header.suv.realtim);		/* new time of last update	*/
prm_rab.rab$l_rbf = &prm_header;		/* now we'll PUT the header	*/
prm_keybuf = 1;					/* header goes in 1st rec posit*/
status = sys$put (&prm_rab);
if ((status&1) != 1)
    {
    rm_printf ("\n*** WRITE ERROR DURING UPDATE OF PERMANENT ACCOUNTING FILE ***");
    rm_printf ("\n*** ACCOUNTING FILE CORRUPTED ***");
    }
/*** Nominal messages commented out.
 * else
 *    rm_printf ("Accounting File Updated");
 ****/

wrapup:
    sys$close (&prm_fab);    		/* close perm file */
    sys$close (&tmp_fab);    		/* close temp file */
    return;

acc_fail:
    rm_acc_fail (status);
    goto wrapup;
}


    long FUNCTION rm_acc_open_perm ()
/*
* DESCRIPTION:
*
*	This routine opens the permanent accounting file for append.  If
*	the file is locked by another user, the open will be retried up
*	to 15 times at one second intervals.
*/

{
long			i,status;

for (i=0; i<15; i++)
    {
    status = sys$open (&prm_fab);    		/* open existing file */
    if (status != RMS$_FLK) break;		/* break unless file locked */
/*    rm_printf ("Accounting File Busy"); */
    sleep(1);					/* wait 1 second */
    }

if ((status&1) != 1) goto acc_fail;

status = sys$connect (&prm_rab);    		/* connect RAB to FAB */
if ((status&1) != 1) goto acc_fail;


acc_fail:
    if (status==RMS$_FNM) status = RMS$_FNF;	/* FNM if no log name */
    return (status);
}



    FUNCTION VOID rm_write_acc (prclevel)
/*
* DESCRIPTION:
*
*	This routine writes a usage accounting record.
*
*/
COUNT		prclevel;		/* nesting level of last proc */

{
long		status;
int		i;

g_acc_rec.suv = g_stotal_uv;			/* total session usage */
g_acc_rec.puv = g_ptotal_uv[prclevel];		/* last proc usage */
for (i=0; g_pname[prclevel][i]!=0; i++)
    g_acc_rec.pname[i] = g_pname[prclevel][i];
for (;i<PROC_MAX;i++) g_acc_rec.pname[i] = ' ';
for (i=0; i<=1; i++)  g_acc_rec.pstart[i] = g_pstart_qt[prclevel][i];

status = sys$put (&tmp_rab);    		/* write acc record */
if ((status&1) != 1) rm_acc_fail (status);
return;
}



    FUNCTION VOID rm_display_usage (prclevel)
/*
* DESCRIPTION:
*
*	This routine displays the usage arrays for the entire session and
*	the last proc executed.
*
*/
COUNT		prclevel;		/* nesting level of last proc */

{
t_use_vec	uv1,uv2;
long		hours1,mins1,secs1,cents1;
long		hours2,mins2,secs2,cents2;
char		buf[STRINGSIZ+1];
COUNT		i;

uv1 = g_stotal_uv;				/* copy session uv */
uv2 = g_ptotal_uv[prclevel];			/* copy proc uv */

rm_printf ("");
rm_printf ("Statistic\t\tSession\t\tLast Proc (%s)",&g_pname[prclevel][0]);
rm_printf ("---------\t\t-------\t\t---------");
rm_printf ("Proc Start Time\t\t\t\t%s", &g_pstart_datetime[prclevel][0]);
rm_printf ("Buffered I/O Count\t%-11d\t%-11d",uv1.bufio,uv2.bufio);
rm_printf ("Direct I/O Count\t%-11d\t%-11d",uv1.dirio,uv2.dirio);
rm_printf ("Page Faults\t\t%-11d\t%-11d",uv1.pageflts,uv2.pageflts);

rm_time_fields (uv1.cputim,&hours1,&mins1,&secs1,&cents1);
rm_time_fields (uv2.cputim,&hours2,&mins2,&secs2,&cents2);
rm_printf ("CPU Time\t\t%02d:%02d:%02d.%02d\t%02d:%02d:%02d.%02d",
	hours1,mins1,secs1,cents1,
	hours2,mins2,secs2,cents2);

rm_time_fields (uv1.realtim,&hours1,&mins1,&secs1,&cents1);
rm_time_fields (uv2.realtim,&hours2,&mins2,&secs2,&cents2);
rm_printf ("Connect Time\t\t%02d:%02d:%02d.%02d\t%02d:%02d:%02d.%02d",
	hours1,mins1,secs1,cents1,
	hours2,mins2,secs2,cents2);

if (run_type != INTER)
    {
    buf[0] = EOS;
    for (i = 0; i < RM_TRAIL_CHARS; i++)
	s_append("-", buf);
    put_stdout(buf);    			/* trailer of "-"s	*/
    }
rm_printf ("");

}



    FUNCTION VOID rm_getcum (p_uv)
/*
* DESCRIPTION:
*
*	This routine returns the sum of the cumulative resource usages for
* 	both the current process and the current sub-process, from the
*	start of the current session.
*
* NOTES:
*
*  1)	g_sstart_uv and g_sstart_qt must be setup prior to the first call
*	to this routine.
*
*/

t_use_vec	*p_uv;		/* pointer to returned uv	*/

{
struct		item			/* define item for $GETJPI call	*/
    {
    unsigned short	len;		/* length of buffer (bytes)	*/
    unsigned short	code;		/* item code			*/
    unsigned long	*addr;		/* buffer address		*/
    unsigned long	*retlenaddr;	/* addr of returned len longword */
    };

long			status,iosb[2],quadtime[2],longtime,dummy,pid;
static t_use_vec	uv1,uv2;	/* local uv's		*/
static struct item	itmlst1[5] = 	/* $GETJPI item list	*/
	{
	{4,JPI$_CPUTIM,&uv1.cputim,0},
	{4,JPI$_PAGEFLTS,&uv1.pageflts,0},
	{4,JPI$_DIRIO,&uv1.dirio,0},
	{4,JPI$_BUFIO,&uv1.bufio,0},
	{0,0,0,0},
	};
static struct item	itmlst2[5] = 	/* $GETJPI item list	*/
	{
	{4,JPI$_CPUTIM,&uv2.cputim,0},
	{4,JPI$_PAGEFLTS,&uv2.pageflts,0},
	{4,JPI$_DIRIO,&uv2.dirio,0},
	{4,JPI$_BUFIO,&uv2.bufio,0},
	{0,0,0,0},
	};

pid = initcb.pid;					/* sub-proc pid */

status = SYS$GETJPI (SYNCH_EFN,0,0,&itmlst1,iosb,0,0);	/* get own JPI	*/
if ((status&1)!=1) rm_fail ("rm_getcum","sys$getjpi(self)",status);

if (pid != 0)
    {
    status = SYS$GETJPI (SYNCH_EFN,&pid,0,&itmlst2,iosb,0,0);	/* sub-proc */
    if ((status&1)!=1) rm_fail ("rm_getcum","sys$getjpi(sub)",status);
    SYS$WAITFR (SYNCH_EFN);				/* wait till done */
    if ((iosb[0]&1)!=1) rm_fail ("rm_getcum","sys$getjpi(sub)",iosb[0]);
    rm_add_uv (&uv1,&uv2,&uv1);				/* add to previous */
    }

rm_sub_uv (&uv1,&g_sstart_uv,p_uv);		/* subtract initial */

/* now process real-time field specially */
SYS$GETTIM (&quadtime);					/* current time */
LIB$SUBX (&quadtime,&g_sstart_qt,&quadtime,&2);	/* delta real time */
LIB$EDIV (&100000,&quadtime,&longtime,&dummy);		/* 10 millisec units */
(*p_uv).realtim = longtime;

return;
}



    FUNCTION VOID rm_time_fields (time,p_hours,p_mins,p_secs,p_cents)
/*
* DESCRIPTION:
*
*	This routine returns the time fields given a time
*	in 10 millisecond units.
*
*/

long	time;					/* time in 10 milliseconds */
long	*p_hours,*p_mins,*p_secs,*p_cents;	/* time fields */

{
long	quad[2];			/* working varibles */
quad[0]=time;
quad[1]=0;				/* clear upper part of quadword */

LIB$EDIV (&100,&quad,&quad,p_cents);	/* quo = seconds, rem = .01 secs */
LIB$EDIV (&60,&quad,&quad,p_secs);	/* quo = minutes, rem = seconds */
LIB$EDIV (&60,&quad,p_hours,p_mins);	/* quo = hours, rem = minutes */

return;
}




    FUNCTION VOID rm_add_uv (uv1,uv2,result)
/*
* DESCRIPTION:
*
*	This routine adds two usage vectors.
*
*/

long 		uv1[1],uv2[1],result[1];

{
long		i;

for (i=0; i<(sizeof(t_use_vec)/4); i++)
    result[i] = uv1[i] + uv2[i];
return;
}



    FUNCTION VOID rm_sub_uv (uv1,uv2,result)
/*
* DESCRIPTION:
*
*	This routine subtracts two usage vectors, so that
*	result = uv1 - uv1.
*
*/

long 		uv1[1],uv2[1],result[1];

{
long		i;

for (i=0; i<(sizeof(t_use_vec)/4); i++)
    result[i] = uv1[i] - uv2[i];
return;
}



    FUNCTION VOID rm_clear_uv (uv)
/*
* DESCRIPTION:
*
*	This routine clears a usage vector.
*
*/

long 		uv[1];

{
long		i;

for (i=0; i<(sizeof(t_use_vec)/4); i++)
    uv[i] = 0;
return;
}



    FUNCTION VOID rm_fail (routine,action,status)
/*
* DESCRIPTION:
*
*	This routine is called to report a fatal error.
*
*/

char		routine[],action[];
long	status;
{
    rm_printf ("");
    rm_printf ("*** RESOURCE MONITOR INTERNAL ERROR ***");
    rm_printf ("- IN ROUTINE %s, DURING %s",routine,action);
    rm_print_status ("- ",status);
    rm_printf ("");
    exit (status);
    return;
}



    FUNCTION VOID rm_print_status (pstr,statval)
/*
* DESCRIPTION:
*
*	This routine decodes and displays a VMS error code.
*
*/

char		*pstr;
long		statval;
{
static long	status,msglen;
static char	msgbuf[80];
static long	msgdesc[2]={80,&msgbuf};
    
    status = SYS$GETMSG (statval,&msglen,&msgdesc,0,0);
    if ((status&1)==1)
      	rm_printf ("%s%.*s",pstr,msglen,msgbuf);
    else
    	rm_printf ("%sVMS error code = %X",pstr,statval);
    
    return;
}



    FUNCTION VOID rm_printf (p_fmt,arg1,arg2,arg3,arg4,arg5,
				arg6,arg7,arg8,arg9,arg10)
/*
* DESCRIPTION:
*
*	This routine formats a record using "PRINTF" conventions, then
*	sends it to the "standard output" device.  The record is
*	written to the standard output using "single space" carriage control.
*
*/

char		*p_fmt;
long		arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10;
{
char		record[200];			/* local record buffer */
char		record2[200+RM_INDENT_TABS];
COUNT		i;

    sprintf (record,p_fmt,arg1,arg2,arg3,arg4,arg5,
			arg6,arg7,arg8,arg9,arg10);	/* format record */
    if (run_type != INTER)				/* for BATCH...	*/
	{						/* indent	*/
	for (i = 0; i < RM_INDENT_TABS; i++)
	    record2[i] = '	';			/* TAB char	*/
	record2[i] = EOS;
	s_append(record, record2);
	put_stdout(record2);
	}
    else
	put_stdout (record);				/* output record */
    return;
}



    FUNCTION VOID rm_acc_fail (status)
/*
* DESCRIPTION:
*
*	This routine is called when an error has ocurred while processing
*	the accounting file.
*
*	- A message is displayed
*	- accounting is disabled
*/

long		status;
{
/*** Nominal messages commented out.
 *    rm_printf ("\n*** ACCOUNTING FILE ERROR ***");
 *    rm_print_status ("- ",status);
 *    rm_printf ("- Resource Accounting now Disabled");
 ****/

    g_acclog = 0;				/* disable accounting */
    return;
}

    FUNCTION CODE rm_autodisplay(prclevel)
/* rm_autodisplay
 *
 * Determines whether to autodisplay the usage stats for a given
 * level of proc nesting.  Returns TRUE if stats should be displayed.
 *
 * Stats are displayed based on the value of the $AUTOUSAGE global variable.
 * If $AUTOUSAGE=="ALL", then stats are always displayed.  If it is "BATCH",
 * then stats are displayed if we are running in batch AND the current
 * proc level is being echoed to the batch log.  If $AUTOUSAGE is "NONE",
 * stats are never automatically displayed.  The default is "BATCH".
 */
COUNT prclevel;		/* level for which autodisplay is to be determined */

{
IMPORT struct VARIABLE  *echo_gbl, *becho_gbl, *aecho_gbl, *autousage_gbl;
TEXT			flag, autoflag;
COUNT			index;

if (autousage_gbl == NULL)
    autoflag = 'B';
else
    autoflag = *(SVAL(*autousage_gbl, 0));

if (autoflag == 'N') return (FALSE);		/* don't autodisp */
if (autoflag == 'A') return (TRUE);		/* always autodisp */

if (run_type != BATCH) return (FALSE);		/* autodisp only for BATCH */

prclevel--;		/* adjust prclevel to correspond to becho index */

if (prclevel > (*becho_gbl).v_count)		/* if echo short... */
    index = (*becho_gbl).v_count - 1;		/* use last	    */
else
    index = prclevel  - 1;
						/* use first character  */
flag = *(SVAL(*becho_gbl, index));		/* of echo global.  if  */
if (flag == 'F' || flag == 'Y' ||		/* echoing, give usage  */
    flag == 'B' || flag == 'T')			/* stats		*/
    return (TRUE);				

return (FALSE);
}
