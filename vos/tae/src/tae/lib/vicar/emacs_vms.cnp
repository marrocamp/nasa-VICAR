/* emacs_do - subroutine to attach to or spawn an EMACS process
 *           Dan Stanfill (DFS059) at JPL   June 5 1985
 */

#include "taeconf.inp"		/* TAE configuration definitions	*/

#include "vicartae.inc"		/* VICAR-specific definitions	*/

#include <ssdef.h>
#include <descrip.h>
#include <jpidef.h>

    FUNCTION CODE emacs_do()
{
    static char tnam[10];			/* term name (c string)	*/
    static $DESCRIPTOR(terminal_name, tnam);	/* term name (descript)	*/
    static $DESCRIPTOR(tt,"TT");
    static char pnam[16];			/* proc name (c str)	*/
    static $DESCRIPTOR(process_name, pnam);	/* proc name (descrip)	*/
    TEXT msgbuf[80];				/* buffer for messages	*/
    int stat;					/* status return	*/
    int pid;
    struct                            /* Needed by getjpi */
    {
	short int length;
	short int item_code;
	int       *p;
	int       return_length;
	int       terminate;
}  jpi = {4, JPI$_PID, &pid, 0, 0};

/* get the terminal name	*/
    stat = sys$trnlog(&tt, 0, &terminal_name, 0, 0, 0);
    if (stat != SS$_NORMAL)
    {
	sprintf(msgbuf,"Error translating terminal name, host code = %d",stat);
	put_stdout(msgbuf);
	put_stdout("[Attached to VICAR]");
	return;
    }

/* put together the emacs process name 	*/
    sprintf(pnam, "Emacs %s", tnam);
    process_name.dsc$w_length = strlen(pnam);

/* get the PID of the emacs subprocess if it exists */
    stat = sys$getjpi( 0, 0, &process_name, &jpi, 0, 0, 0);
    sys$waitfr(0);

    if (stat == SS$_NORMAL)	/* if process already exists, attach to it */
    {
        put_stdout("[Attaching to Kept Emacs]");
	stat = lib$attach(&pid);
	if (stat != SS$_NORMAL)
	{
	    sprintf(msgbuf,
		"You cannot attach to that process, host code = %d", stat);
	    put_stdout(msgbuf);
	    return;
	}
    }
    else
    {
	static $DESCRIPTOR(command_str,"keptemacs");

        put_stdout("[Spawning new Kept Emacs]");
	stat = lib$spawn(&command_str, 0, 0, &0, &process_name);
	if (stat != SS$_NORMAL)
	{
	    sprintf(msgbuf, "Cannot spawn Emacs process, host code = %d",stat);
	    put_stdout(msgbuf);
	}
    }
    put_stdout("[Attached to VICAR]");
    return;
}
