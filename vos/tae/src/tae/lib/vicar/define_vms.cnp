/* define - subroutine to define symbols or logicals in supervisor mode
 *            Kurt Andersen (KKA059) at JPL  11 June 1987
 */

#include "stdh.inp"		/* system standard  (REQUIRED)		*/
#include "taeconf.inp"		/* TAE configuration (REQUIRED)		*/

#include "parblk.inc"		/* parameter block definitions		*/
#include "symtab.inc"		/* TM symbol table			*/
#include "tminc.inc"		/* TM definitions			*/

#include "vicartae.inc"		/* VICAR-specific definitions		*/

#include <ssdef.h>
#include <descrip.h>

    FUNCTION CODE deflog_do(procctx, cmdctx)

    struct CONTXT *procctx;	/* in/out: enclosing proc contxt	*/
    struct CONTXT *cmdctx;	/* in/out: command contxt		*/

    {
    struct VARIABLE *n, *v;		/* variables for NAME and VALUE */
    struct dsc$descriptor_s name_field,value_field;
    TEXT cmdstr[CMDLINSIZ+1];		/* buffer for new command line */
    TEXT msgbuf[80];			/* buffer for messages	    */
    int status;				/* status return	    */
    unsigned char quoted_string[132];	/* quoted string            */

    n = lookex(&(*cmdctx).parmst, "NAME");
    v = lookex(&(*cmdctx).parmst, "VALUE");

    name_field.dsc$w_length = strlen(SVAL(*n,0));
    name_field.dsc$a_pointer = SVAL(*n,0); 
    name_field.dsc$b_class = DSC$K_CLASS_S;
    name_field.dsc$b_dtype  = DSC$K_DTYPE_T;

    if (v != NULL)
    {
        add_quotation_marks (quoted_string, SVAL(*v,0));
        value_field.dsc$w_length = strlen(quoted_string);
        value_field.dsc$a_pointer = quoted_string; 
        value_field.dsc$b_class = DSC$K_CLASS_S;
        value_field.dsc$b_dtype  = DSC$K_DTYPE_T;
    }

    if (s_equal ((*cmdctx).subcmd, "ADD"))
    {
        status = lib$set_logical(&name_field, &value_field);
        sprintf (cmdstr, "DCL DEFINE %s %s", SVAL(*n,0), SVAL(*v,0));
    }
    else
    {
        status = lib$delete_logical(&name_field);
        sprintf (cmdstr, "DCL DEASSIGN %s", SVAL(*n,0));
    }

    if (status != SS$_NORMAL)
    {
      	sprintf(msgbuf,
"%sing that logical name not allowed, host code = %d", (*cmdctx).subcmd,status);
	put_stdout(msgbuf);
	return;
    }

/* Fix the logical name in the subprocess */
    prccmd (cmdstr, procctx);

    return;
}


    FUNCTION CODE defsym_do(procctx, cmdctx)

    struct CONTXT *procctx;	/* in/out: enclosing proc contxt	*/
    struct CONTXT *cmdctx;	/* in/out: command contxt		*/

    {
    struct VARIABLE *n, *v;		/* variables for NAME and VALUE */
    struct dsc$descriptor_s name_field, value_field;
    TEXT cmdstr[CMDLINSIZ+1];		/* buffer for new command line */
    TEXT msgbuf[80];			/* buffer for messages	    */
    int status;				/* status return	    */
    unsigned char quoted_string[132];	/* quoted string            */

    n = lookex(&(*cmdctx).parmst, "NAME");
    v = lookex(&(*cmdctx).parmst, "VALUE");

    name_field.dsc$w_length = strlen(SVAL(*n,0));
    name_field.dsc$a_pointer = SVAL(*n,0); 
    name_field.dsc$b_class = DSC$K_CLASS_S;
    name_field.dsc$b_dtype  = DSC$K_DTYPE_T;

    if (v != NULL)
    {
        add_quotation_marks (quoted_string, SVAL(*v,0));
        value_field.dsc$w_length = strlen(quoted_string);
        value_field.dsc$a_pointer = quoted_string; 
        value_field.dsc$b_class = DSC$K_CLASS_S;
        value_field.dsc$b_dtype  = DSC$K_DTYPE_T;
    }

    if (s_equal ((*cmdctx).subcmd, "ADD"))
    {
        status = lib$set_symbol(&name_field,&value_field,&2); /* Global symbol*/
        sprintf (cmdstr, "DCL %s==\"%s\"", SVAL(*n,0), SVAL(*v,0));
    }
    else
    {
        status = lib$delete_symbol(&name_field, &2);          /* Global symbol*/
        sprintf (cmdstr, "DCL DELETE/SYMBOL/GLOBAL %s", SVAL(*n,0));
    }

    if (status != SS$_NORMAL)
    {
      	sprintf(msgbuf,
    "%sing that symbol not allowed, host code = %d", (*cmdctx).subcmd, status);
	put_stdout(msgbuf);
	return;
    }

/* Fix the symbol in the subprocess */
    prccmd (cmdstr, procctx);

    return;
}

    FUNCTION CODE add_quotation_marks (output_string, input_string)

    unsigned char *output_string, *input_string;
    {
    unsigned char *next_quote;

    sprintf (output_string, " %s", input_string);

    next_quote = strchr (output_string, '"');

    while (next_quote) 
    {
       	sprintf (next_quote, "\"%s", next_quote);
        next_quote = strchr (next_quote+2, '"');
    }

    output_string[0] = '"';
    strcat (output_string, "\"");

    return;
}
