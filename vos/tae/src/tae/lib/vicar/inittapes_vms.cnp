/*	Routines to initialize ANSI-labeled tapes */
/*
 * CHANGE LOG:
 *
 */


#include "stdh.inp"		/* system standard  (REQUIRED)		*/
#include "taeconf.inp"		/* TAE configuration (REQUIRED)		*/
#include "symtab.inc"		/* TM symbol table			*/
#include "tmhost.inp"		/* TM host-dependent definitions	*/
#include "tminc.inc"		/* TM definitions			*/

#include "vicartae.inc"		/* VICAR-specific definitions		*/

#include <dvidef.h>		/* VMS device information		*/
#include <descrip.h>		/* VMS c descriptor macros		*/
#include <iodef.h>		/* VMS i/o codes			*/
#include <ssdef.h>		/* VMS status code definitions		*/
#include <mntdef.h>		/* VMS mount definitions		*/
#include <mtdef.h>		/* VMS mag tape definitions		*/

#define KILL(x,y,z) {tmmsg(PROCFAIL,y,x,z); return(DO_CHECK);}

#ifndef MIN
#define MIN(x,y)  (((x)>(y)) ? (y) : (x))
#endif

#define NOUNLOAD	0
#define UNLOAD		1

TEXT *hostmsg();


/***************************************************************************
 *	init_tapes.   Initialize one or more ANSI-labeled tapes.
 *
 *	This routine is complex because of three bugs in VMS.  1. There is
 *	no system service or library routine to initialize a tape, so the
 *	DCL INIT command must be used.  2. A subprocess cannot access a
 *	tape drive that is allocated to the parent process.  3. Even though
 *	mounting a tape in a subprocess transfers ownership of the drive to
 *	the parent, the parent cannot deallocate it (from within an image)
 *	without privileges (DCL DEALLOCATE works though).
 *
 *	So, we must do the following for each tape:
 *
 *	Parent				Sub
 *	mount/foreign	* puts the tape on the drive
 *	dismount/nounload
 *	deallocate drive (if allocated)
 *					Allocate drive
 *					Initialize
 *					Deallocate the drive
 *	If drive was originally allocated
 *	    allocate it
 *	If we need this drive again to init more tapes
 *	    mount/foreign
 *	    dismount/unload	* so it won't re-init the same tape
 *
 *	There are two race conditions here.  Between the time the parent
 *	deallocates the drive and the subprocess re-allocates it, the drive
 *	could concievably be stolen by another process.  However, this is
 *	(hopefully!!) unlikely.  Currently, it will die with an appropriate
 *	message if this happens.  This could (should?) be changed later to
 *	either allocate a new drive or wait till the old one frees up.  The
 *	other race is identical to the first, between the time the subprocess
 *	deallocates the drive and the parent reallocates it.
 *
 *	If there are more tapes (part of a volume set) than drives, the extra
 *	tapes will be initialized first, so that the first tapes of the set
 *	end up on the drives ready for mounting.
 ***************************************************************************
 */

    FUNCTION CODE init_tapes(procctx, device, label, density, comment)

    struct CONTXT *procctx;		/* in/out: proc context */
    struct VARIABLE *device, *label;	/* device and label for each tape */
    TAEINT density;			/* density of tape */
    TEXT *comment;			/* comment for mount */

    {

    CODE code;
    COUNT i;
    COUNT dev_count, label_count;

    dev_count = (*device).v_count;
    label_count = (*label).v_count;

    /* Process 'extra' tapes first if there are more than the # of devices */

    for (i = dev_count; i < label_count; i++)
	{
	code = init_one_tape (procctx,  SVAL(*device, i % dev_count),
					SVAL(*label, i), density, comment,
					UNLOAD);
	if (code != SUCCESS)
	    return code;	/* err message already printed */
	}

    /* Now process tapes that have a drive available */

    for (i = 0; i < MIN(dev_count, label_count); i++)
	{
	code = init_one_tape (procctx,  SVAL(*device, i),
					SVAL(*label, i), density, comment,
					NOUNLOAD);
	if (code != SUCCESS)
	    return code;	/* err message already printed */
	}

    return (SUCCESS);
    }

/***************************************************************************
 *	init_one_tape.   Actually initialize one ANSI-labeled tape.
 *	See comments above init_tapes for explanation of the sequence.
 ***************************************************************************
 */

    FUNCTION CODE init_one_tape(procctx, device, label, density, comment, unl)

    struct CONTXT *procctx;		/* in/out: proc context */
    TEXT *device, *label;		/* device and label for the tape */
    TAEINT density;			/* density of tape */
    TEXT *comment;			/* comment for mount */
    TAEINT unl;				/* unload/nounload flag */
    {

    CODE code;
    BOOL allocated;
    TEXT cmdstr[STRINGSIZ+1];
    IMPORT struct VARIABLE *sfi_gbl;
    long init_error_code;
    TAEINT init_err;
    TEXT phybuf[STRINGSIZ+1];		/* Dummies used for $alloc call */
    int phylen;				/* Another dummy */

    $DESCRIPTOR(devdesc, device);
    $DESCRIPTOR(phydesc, phybuf);

    allocated = TRUE;

/* Mount and dismount in the parent */

    code = init_mount(device, label, density, comment, NOUNLOAD);
    if (code != SUCCESS)
	return code;		/* err message already printed */

/* Dealloc in parent and reallocate in subprocess */

    devdesc.dsc$w_length = strlen(device);
    sprintf(cmdstr, "DCL ALLOCATE %s", device);

/* Race condition #1 begins here */

    code = sys$dalloc(&devdesc, 0);		/* deallocate */
    prccmd(cmdstr, procctx);			/* reallocate */

/* Race condition #1 ends here */

    if (code == SS$_DEVNOTALLOC)
	allocated = FALSE;	/* it wasn't allocated to start with */
    else if ((code&1) != SUCCESS)
	KILL("TAE-NOTDEALL", hostmsg(code), "");

    if (IVAL(*sfi_gbl,0) != SUCCESS)
	KILL("TAE-STOLEN", "Cannot allocate in subprocess during INIT.", "");

/* Now initialize the tape */

    sprintf (cmdstr, "DCL INITIALIZE/DENSITY=%d %s %s", density, device, label);
    prccmd (cmdstr, procctx);
    init_err = IVAL(*sfi_gbl,0);	/* Defer error checking until after */
				/* the drive is reallocated to the parent */

/* Deallocate the drive and (maybe) let the parent re-allocate it. */

    sprintf (cmdstr, "DCL DEALLOCATE %s", device);

/* Race condition #2 begins here */

    prccmd (cmdstr, procctx);
    if (allocated)
	{					/* transfer ownership */
	code = sys$alloc(&devdesc, &phylen, &phydesc, 0, 0);

/* Race condition #2 ends here */

	if (init_err != SUCCESS)
	    {
	    IVAL(*sfi_gbl,0) = init_err;
	    return DO_CHECK;
	    }
	if ((code&1) != SUCCESS)
	    KILL("TAE-STOLEN", "Cannot allocate in parent process during INIT",
		 "");
	}

    if (init_err != SUCCESS)
	{
	IVAL(*sfi_gbl,0) = init_err;
	return DO_CHECK;
	}

    if (IVAL(*sfi_gbl,0) != SUCCESS)
	return DO_CHECK;

/* Now mount, dismount/unload if we need this drive again */

    if (unl == UNLOAD)
	{
	code = init_mount(device, label, density, comment, UNLOAD);
	if (code != SUCCESS)
	    return code;		/* err message already printed */
	}

    return (SUCCESS);
    }


/***************************************************************************
 *	init_mount.   Mounts/foreign and dismounts/nounload a tape for init.
 ***************************************************************************
 */
    FUNCTION CODE init_mount (device, label, density, comment, unl)
    
    TEXT	*device,  *label;
    TAEINT	density;
    TEXT	*comment;
    TAEINT	unl;

    {

    CODE	code;
    int		flags;
    int		class;
    int		class_len;
    TEXT	full_name[TAPEDEVSIZE+1];	/* full device name */
    int		name_len;

    struct itmlst dvi_list[] = {     4, DVI$_DEVDEPEND, &class, &class_len,
				TAPEDEVSIZE, DVI$_DEVNAM, full_name, &name_len,
				0, 0, 0, 0
				};

/* If the array indices change, change the mntlist items below also */

    struct itmlst mntlist[] =
	{	0, MNT$_DEVNAM,  device,   0,	/* 0 = device */
		0, MNT$_VOLNAM,  label,    0,	/* 1 = label */
		4, MNT$_FLAGS,   &flags,   0,	/* 2 = flags */
		4, MNT$_DENSITY, &density, 0,	/* 3 = density */
		0, MNT$_COMMENT, comment,  0,	/* 4 = comment */
		0, 0, 0, 0			/* 5 = terminator */
	};

    $DESCRIPTOR( devicen, device );

    mntlist[0].length = strlen(device);
    mntlist[1].length = strlen(label);

    if (strlen(comment) != 0)		/* mount doesn't like null comments */
	{
	mntlist[4].length = strlen(comment);
	mntlist[4].code = MNT$_COMMENT;
	mntlist[4].buffer = comment;
	mntlist[4].retlen = 0;
	}
    else
	{
	mntlist[4].length = 0;
	mntlist[4].code = 0;
	mntlist[4].buffer = 0;
	mntlist[4].retlen = 0;
	}

    flags = MNT$M_MESSAGE | MNT$M_FOREIGN;

    code = sys_mount(mntlist);
    if ((code&1) != 1)
	KILL("TAE-NOMOUNT", hostmsg(code), "")

/* Check for write ring */

    do  {    			/* until tape gets a ring put in */

/* request device information */
	devicen.dsc$w_length = strlen(device);
	code = sys$getdviw(0,0,&devicen,&dvi_list,0,0,0,0);
        
/* if the write ring is out */
	if (class & MT$M_HWL)   
	    {

/* Dismount/unload the tape */

	    code = i_dismou (full_name, 1);		/* UNLOAD */
	    if ((code&1) != 1)
		KILL("TAE-DISMNTFAIL", hostmsg(code), "");

/* Tell operator to put a ring in the tape and wait for response */
	    code = ring_request(full_name);

/* If the operator aborted the request, die */
	    if (code != SUCCESS)
		{
		KILL("TAE-NOMOUNT",
		     "MOUNT failure. No write ring in tape %s", full_name)
		}

/* try to mount the tape again */
	    code = sys_mount(mntlist);
	    if ((code&1) != 1)
		{
		KILL("TAE-NOMOUNT", hostmsg(code), "");
		}
	    }
	} while (class & MT$M_HWL);

/* Now dismount the tape */

    if (unl == UNLOAD)
	code = i_dismou (full_name, 1);		/* UNLOAD */
    else
	code = i_dismou (full_name, 0);		/* NOUNLOAD */
    if ((code&1) != 1)
	KILL("TAE-DISMNTFAIL", hostmsg(code), "");

    return (SUCCESS);
    }

