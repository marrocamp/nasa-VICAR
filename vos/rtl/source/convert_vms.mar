;
; This module has 30 routines that convert between all types:
; real, double, complex, byte, halfword, and fullword.
; A typical routine is named, half2real, or real2byte.
;
; Each routine has the same call sequence:
;     read2comp(in,out,len)
; which moves 'len' items from 'in' to 'out' .
;
; the routines are meant to be c-callable;
; a typical call sequence might be:
;
; int len ;
; char a[10] ;
; float f[10] ;
;
;    ...
;
; byte2real(a,b,len) ;
;
           .title convert_vms
           .entry byte2real,^m<r2>
;
           tstl   12(ap)
           beql   20$
           movl   4(ap),r0
           movl   8(ap),r1
10$:       movzbl (r0)+,r2     ; mov unsigned first to avoid propagation
                               ; of the sign bit.
           cvtlf  r2,(r1)+     ; convert and move.
           sobgtr 12(ap),10$   ; loop to 10$ until done.
20$:       movl   #1,r0        ; set up SUCCESS return
           ret
;
           .entry half2real,^m<r2>
;
           tstl   12(ap)
           beql   20$
           movl   4(ap),r0
           movl   8(ap),r1
10$:       cvtwf  (r0)+,(r1)+  ; convert and move.
           sobgtr 12(ap),10$   ; loop to 10$ until done.
20$:       movl   #1,r0        ; set up SUCCESS return
           ret
;
           .entry full2real,^m<r2>
;
           tstl   12(ap)
           beql   20$
           movl   4(ap),r0
           movl   8(ap),r1
10$:       cvtlf  (r0)+,(r1)+  ; convert and move.
           sobgtr 12(ap),10$   ; loop to 10$ until done.
20$:       movl   #1,r0        ; set up SUCCESS return
           ret
;
           .entry comp2real,^m<r2>
;
           tstl   12(ap)
           beql   20$
           movl   4(ap),r0
           movl   8(ap),r1
10$:       cvtdf  (r0)+,(r1)+  ; move just the real part
           sobgtr 12(ap),10$   ; loop to 10$ until done.
20$:       movl   #1,r0        ; set up SUCCESS return
           ret
;
           .entry real2byte,^m<r2>
;
           tstl   12(ap)
           beql   20$
           movl   4(ap),r0
           movl   8(ap),r1
10$:       cvtfl  (r0)+,r2     ; first convert to long
           tstl   r2           ; if its less than 0 then
           blss   12$          ; zero it at 12$
           movb   r2,(r1)+     ; move.
           brb    15$
12$:       movb   s^#0,(r1)+
15$:       sobgtr 12(ap),10$   ; loop to 10$ until done.
20$:       movl   #1,r0        ; set up SUCCESS return
           ret
;
           .entry real2half,^m<r2>;
           tstl   12(ap)
           beql   20$
           movl   4(ap),r0
           movl   8(ap),r1
10$:       cvtfw  (r0)+,(r1)+  ; convert and move.
           sobgtr 12(ap),10$   ; loop to 10$ until done.
20$:       movl   #1,r0        ; set up SUCCESS return
           ret
;
           .entry real2full,^m<r2>
;
           tstl   12(ap)
           beql   20$
           movl   4(ap),r0
           movl   8(ap),r1
10$:       cvtfl  (r0)+,(r1)+  ; convert and move.
           sobgtr 12(ap),10$   ; loop to 10$ until done.
20$:       movl   #1,r0        ; set up SUCCESS return
           ret
;
           .entry byte2comp,^m<r2>
;
           tstl   12(ap)
           beql   20$
           movl   4(ap),r0
           movl   8(ap),r1
10$:       movzbl (r0)+,r2     ; mov unsigned first to avoid propagation
                               ; of the sign bit.
           cvtlf  r2,(r1)+     ; convert and move.
           movl   #0,(r1)+     ; zero the complex part.
           sobgtr 12(ap),10$   ; loop to 10$ until done.
20$:       movl   #1,r0        ; set up SUCCESS return
           ret
;
           .entry half2comp,^m<r2>
;
           tstl   12(ap)
           beql   20$
           movl   4(ap),r0
           movl   8(ap),r1
10$:       cvtwf  (r0)+,(r1)+  ; convert and move.
           movl   #0,(r1)+     ; zero the complex part.
           sobgtr 12(ap),10$   ; loop to 10$ until done.
20$:       movl   #1,r0        ; set up SUCCESS return
           ret
;
           .entry full2comp,^m<r2>
;
           tstl   12(ap)
           beql   20$
           movl   4(ap),r0
           movl   8(ap),r1
10$:       cvtlf  (r0)+,(r1)+  ; convert and move.
           movl   #0,(r1)+     ; zero the complex part.
           sobgtr 12(ap),10$   ; loop to 10$ until done.
20$:       movl   #1,r0        ; set up SUCCESS return
           ret
;
           .entry comp2byte,^m<r2>
;
           tstl   12(ap)
           beql   20$
           movl   4(ap),r0
           movl   8(ap),r1
10$:       cvtfl  (r0)+,r2     ; first convert to long
           tstl   r2           ; if its less than 0 then
           blss   12$          ; zero it at 12$
           movb   r2,(r1)+     ; else move.
           brb    15$
12$:       movb   s^#0,(r1)+
15$:       tstl   (r0)+        ; skip the complex part.
           sobgtr 12(ap),10$   ; loop to 10$ until done.
20$:       movl   #1,r0        ; set up SUCCESS return
           ret
;
           .entry comp2half,^m<r2>
;
           tstl   12(ap)
           beql   20$
           movl   4(ap),r0
           movl   8(ap),r1
10$:       cvtfw  (r0)+,(r1)+  ; convert and move.
           tstl   (r0)+        ; skip the complex part.
           sobgtr 12(ap),10$   ; loop to 10$ until done.
20$:       movl   #1,r0        ; set up SUCCESS return
           ret
;
           .entry comp2full,^m<r2>
;
           tstl   12(ap)
           beql   20$
           movl   4(ap),r0
           movl   8(ap),r1
10$:       cvtfl  (r0)+,(r1)+  ; convert and move.
           tstl   (r0)+        ; skip the complex part.
           sobgtr 12(ap),10$   ; loop to 10$ until done.
20$:       movl   #1,r0        ; set up SUCCESS return
           ret
;
           .entry real2comp,^m<r2>
;
           tstl   12(ap)
           beql   20$
           movl   4(ap),r0
           movl   8(ap),r1
10$:       movf   (r0)+,(r1)+  ; convert and move.
           movl   #0,(r1)+     ; zero the complex part.
           sobgtr 12(ap),10$   ; loop to 10$ until done.
20$:       movl   #1,r0        ; set up SUCCESS return
           ret
;
           .entry byte2half,^m<r2>
;
           tstl   12(ap)
           beql   20$
           movl   4(ap),r0
           movl   8(ap),r1
10$:       movzbl (r0)+,r2     ; mov unsigned first to avoid propagation
                               ; of the sign bit.
           cvtlw  r2,(r1)+     ; convert and move.
           sobgtr 12(ap),10$   ; loop to 10$ until done.
20$:       movl   #1,r0        ; set up SUCCESS return
           ret
;
           .entry byte2full,^m<r2>
;
           tstl   12(ap)
           beql   20$
           movl   4(ap),r0
           movl   8(ap),r1
10$:       movzbl (r0)+,(r1)+  ; mov unsigned to avoid propagation
                               ; of the sign bit.
           sobgtr 12(ap),10$   ; loop to 10$ until done.
20$:       movl   #1,r0        ; set up SUCCESS return
           ret
;
           .entry half2byte,^m<r2>
;
           tstl   12(ap)
           beql   20$
           movl   4(ap),r0
           movl   8(ap),r1
10$:       movw   (r0)+,r2     ; get the halfword.
           tstl   r2           ; if its less than 0 then
           blss   12$          ; zero it at 12$
           movb   r2,(r1)+     ; else move.
           brb    15$
12$:       movb   s^#0,(r1)+
15$:       sobgtr 12(ap),10$   ; loop to 10$ until done.
           blss   12$          ; zero it at 12$
20$:       movl   #1,r0        ; set up SUCCESS return
           ret
;
           .entry half2full,^m<r2>
;
           tstl   12(ap)
           beql   20$
           movl   4(ap),r0
           movl   8(ap),r1
10$:       cvtwl  (r0)+,(r1)+  ; convert and move.
           sobgtr 12(ap),10$   ; loop to 10$ until done.
20$:       movl   #1,r0        ; set up SUCCESS return
           ret
;
           .entry full2byte,^m<r2>
;
           tstl   12(ap)
           beql   20$
           movl   4(ap),r0
           movl   8(ap),r1
10$:       movl   (r0)+,r2     ; get the longword.
           tstl   r2           ; if its less than 0 then
           blss   12$          ; zero it at 12$
           movb   r2,(r1)+     ; else move.
           brb    15$
12$:       movb   s^#0,(r1)+
15$:       sobgtr 12(ap),10$   ; loop to 10$ until done.
           blss   12$          ; zero it at 12$
20$:       movl   #1,r0        ; set up SUCCESS return
           ret
;
           .entry full2half,^m<r2>
;
           tstl   12(ap)
           beql   20$
           movl   4(ap),r0
           movl   8(ap),r1
10$:       cvtlw  (r0)+,(r1)+  ; convert and move.
           sobgtr 12(ap),10$   ; loop to 10$ until done.
20$:       movl   #1,r0        ; set up SUCCESS return
           ret
;
           .entry doub2byte,^m<r2 >
;
           tstl   12(ap)
           beql   20$
           movl   4(ap),r0
           movl   8(ap),r1
10$:       cvtdl  (r0)+,r2     ; first convert to long
           tstl   r2           ; if its less than 0 then
           blss   12$          ; zero it at 12$
           movb   r2,(r1)+     ; move.
           brb    15$
12$:       movb   s^#0,(r1)+
15$:       sobgtr 12(ap),10$   ; loop to 10$ until done.
20$:       movl   #1,r0        ; set up SUCCESS return
           ret
;
           .entry doub2half,^m<r2>
;
           tstl   12(ap)
           beql   20$
           movl   4(ap),r0
           movl   8(ap),r1
10$:       cvtdw  (r0)+,(r1)+  ; convert and move.
           sobgtr 12(ap),10$   ; loop to 10$ until done.
20$:       movl   #1,r0        ; set up SUCCESS return
           ret
;
           .entry doub2full,^m<r2>
;
           tstl   12(ap)
           beql   20$
           movl   4(ap),r0
           movl   8(ap),r1
10$:       cvtdl  (r0)+,(r1)+  ; convert and move.
           sobgtr 12(ap),10$   ; loop to 10$ until done.
20$:       movl   #1,r0        ; set up SUCCESS return
           ret
;
           .entry doub2real,^m<r2>
;
           tstl   12(ap)
           beql   20$
           movl   4(ap),r0
           movl   8(ap),r1
10$:       cvtdf  (r0)+,(r1)+  ; convert and move.
           sobgtr 12(ap),10$   ; loop to 10$ until done.
20$:       movl   #1,r0        ; set up SUCCESS return
           ret
;
           .entry doub2comp,^m<r2>
;
           tstl   12(ap)
           beql   20$
           movl   4(ap),r0
           movl   8(ap),r1
10$:       cvtdf  (r0)+,(r1)+  ; convert double to float and move
           movl   #0,(r1)+     ; zero the complex part.
           sobgtr 12(ap),10$   ; loop to 10$ until done.
20$:       movl   #1,r0        ; set up SUCCESS return
           ret
;
           .entry byte2doub,^m<r2>
;
           tstl   12(ap)
           beql   20$
           movl   4(ap),r0
           movl   8(ap),r1
10$:       movzbl (r0)+,r2     ; mov unsigned first to avoid propagation
                               ; of the sign bit.
           cvtld  r2,(r1)+     ; convert and move.
           sobgtr 12(ap),10$   ; loop to 10$ until done.
20$:       movl   #1,r0        ; set up SUCCESS return
           ret
;
           .entry half2doub,^m<r2>
;
           tstl   12(ap)
           beql   20$
           movl   4(ap),r0
           movl   8(ap),r1
10$:       cvtwd  (r0)+,(r1)+  ; convert and move.
           sobgtr 12(ap),10$   ; loop to 10$ until done.
20$:       movl   #1,r0        ; set up SUCCESS return
           ret
;
           .entry full2doub,^m<r2>
;
           tstl   12(ap)
           beql   20$
           movl   4(ap),r0
           movl   8(ap),r1
10$:       cvtld  (r0)+,(r1)+  ; convert and move.
           sobgtr 12(ap),10$   ; loop to 10$ until done.
20$:       movl   #1,r0        ; set up SUCCESS return
           ret
;
           .entry real2doub,^m<r2>
;
           tstl   12(ap)
           beql   20$
           movl   4(ap),r0
           movl   8(ap),r1
10$:       cvtfd  (r0)+,(r1)+  ; convert and move.
           sobgtr 12(ap),10$   ; loop to 10$ until done.
20$:       movl   #1,r0        ; set up SUCCESS return
           ret
;
           .entry comp2doub,^m<r2>
;
           tstl   12(ap)
           beql   20$
           movl   4(ap),r0
           movl   8(ap),r1
10$:       movf   (r0)+,(r1)+  ; move just the real part
           tstl   (r0)+        ; skip the complex part.
           sobgtr 12(ap),10$   ; loop to 10$ until done.
20$:       movl   #1,r0        ; set up SUCCESS return
           ret
           .end
