procedure help=* options=nointerrupt
subcmd plane
  parm name string
  parm plane string
  parm device string count=0:1 default=--
end-subcmd
subcmd region
  parm name   string default=CURRENT
  parm points integer count=(0,2:600) default=--
  parm shape  keyword valid=(RECT,OVAL,CIRCLE,POLYGON,SQUARE) default=RECT
  parm device string count=0:1 default=--
end-subcmd
body
chkvids1
if (_subcmd = "PLANE")
  sendvar (_proc,_subcmd,name,plane,device) job=VIDSJOB
else-if (_subcmd = "REGION")
  sendvar (_proc,_subcmd,name,shape,points,device) job=VIDSJOB
end-if
chkvids2
end-proc
.title
VIDS Command JDEF
.help
The JDEF command is used to define new objects to work with in VIDS.
Each object may be defined with commands of the form

JDEF-object 

where "object" represents the object to be defined.  Each object is
described in detail under the help for that JDEF- command.

Examples:

JDEF-PLANE	- Define a new image plane name
JDEF-REGION	- Define a new region
.level1
.subcmd plane
Define a new plane name
.vari name -plane
New name to be defined
.vari plane -plane
Plane to assign to new name
.subcmd region
Define a region for use
with other vids commands.
.vari name -region
Name of the region to define
(Should usually be defaulted)
.vari points -region
List of points in shape
(Use cursor if not given;
see also SHAPE)
.vari shape -region
Shape desired. See HELP
SHAPE for valid shapes.
.vari device
Name of device to use
.level2
.subcmd plane
The JDEF-PLANE command is used to define a new name for an image plane.
Such a name is useful to allow procs to access a user defined plane,
but have the plane switchable at runtime.

Two parameters are required:  a new name, and an image plane.  The
new name may be any string.  The image plane is the standard VIDS
plane parameter, and may thus be either an image plane number or
an existing image plane name.

Examples:

JDEF-PLANE FOO 2	- Give image plane 2 the name "FOO".

JDEF-PLANE HELLO BW	- Give the current black and white plane the
			- name "HELLO".
.vari name -plane
The NAME parameter specifies a new name to give to the image plane.

If the name is already assigned to an image plane, it is redefined
with the new name.
.vari plane -plane
The PLANE parameter specifies which plane is to be given the 
new name.  It is the standard VIDS PLANE parameter, and may
thus be either an existing plane name or a plane number.  See
HELP PLANENAMES for details.
.subcmd region
JDEF-REGION is used to define a region of interest for use with
other VIDS commands.  For example, a histogram could be collected 
on the region, or the region could be erased.  A region is always
defined in terms of coordinates in the graphics overlay plane (if
one is available).  If planes are subsequently panned or zoomed,
the data referred to by the region will be whatever is now visually
under the region.  Thus, as the graphics plane is panned, so are
the regions.

Each region defined must have a name.  If the name of an existing 
region is used when defining a region, then the old region is 
destroyed and replaced with the new region.

If no list of points for the region is specified, then the user
must use the cursor to interactively define the region.  For all
region shapes except polygons, two points must be specified,
representing two opposite corners of a rectangle bounding the
required shape.  For polygons, each vertex must be specified.

See help on the SHAPE parameter for a list of valid region shapes.

Examples:

JDEF-REG		- Trace out a rectangular region named
			- CURRENT on the display device.
JDEF-REG FOO		- Trace out a rectangular region named
			- FOO on the display device.
JDEF-REG FOO POI=(100,200,150,250,300,200,120,100,50,50) 'POLY
			- Define a polygon named FOO with 5 vertices.
JDEF-REG 'POLY		- Trace out a polygon named CURRENT on device.
.vari name -region
The NAME parameter specifies the name of the region to define.  If
a region already exists with that name, the old region is deleted
and the new region takes its place.  Any name may be specified.

The default name is CURRENT.
.vari points -region
The POINTS parameter is used to specify a list of points in the region.
The points are given in terms of graphics plane coordinates.  If no
points are given by the POINTS parameter, you must trace out the 
shape interactively on the display device.

For all regions except polygons, two points should be specified,
defining two opposite corners of the rectangle bounding the region,
in the format points=(l1,s1,l2,s2), where (l1,s1) defines the line
and sample coordinates of one point, and (l2,s2) defines the line and
sample coordinates of the opposite corner. If the shape is a polygon,
then POINTS specifies the list of points defining the vertices of the
polygon, points=(l1,s1,l2,s2,...,ln,sn).  Each point on the list will
be connected to the next point on the list, with the last point, (ln,sn),
being connected to the first point (l1,s1) to close the polygon.

.vari shape -region
The SHAPE parameter defines the shape of the region.  The following 
shapes are allowed:

	RECT:	 A rectangle.  This is the default shape.
	SQUARE:	 A square.  Identical to RECT except that it will be
		 restricted to a square, so that the longer of the two
		 dimensions is shortened to equal the shorter.
	OVAL:	 An ellipse.  The ellipse will touch the bounding
		 rectangle of the region in the center of each of
		 the four sides.
	CIRCLE:	 A circle.  Identical to OVAL except that it will be
		 restricted to a circle in the same fashion that a
		 SQUARE shape will be be restricted from a rectangle.
	POLYGON: An irregular polygon.  A polygon is any list of points
		 defining vertices;  it may cross itself, be concave,
		 convex, etc.  For example, an hourglass would be a
		 valid polygon.
.vari device
The DEVICE parameter specifies which display device to perform this
operation on.  This device will then become the current device for
future operations.

If DEVICE is not given, the current display device is used, i.e. the
last device you specified on any VIDS command.

A device must be JGRAB'ed before use.  See the help for JGRAB for more
details.
.end
