procedure help=* options=nointerrupt
parm device string count=0:1 default=--
parm debug keyword valid=(DEBUG,NODEBUG) default=NODEBUG
local msgsav string
local swtchsav integer
local lognam string
refgbl $message
refgbl $vidsflg
refgbl $switch
refgbl $syschar
body
if ($vidsflg <> "NOVIDS")
  putmsg "VIDS is already running.  Only one session allowed at a time." +
         "VIDS-RUNNING"
  return
end-if
if (debug = "DEBUG")
  let _onfail="Goto end"
  let swtchsav=$switch
  flag-del debug		! don't run translog in debug mode!
  flag-add nomessage
  translog tae$app_input lognam
  let $switch=swtchsav
  if (lognam = "NL:")
    putmsg "You must 'define TAE$APP_INPUT TT' outside VICAR before debugging VIDS." +
	   "VIDS-NODEBUG"
    return
  end-if
end-if
let _onfail="Goto continue"
let msgsav=$message
let $message="silent"
enable-recvar
continue>
let $message=msgsav
let _onfail="Goto abort"
let swtchsav=$switch		! set or reset debug mode as needed
if (debug = "DEBUG")
  flag-add debug
else
  flag-delete debug		! debug can hang if tae$app_input not right!
end-if
let $vidsflg="WAITING"
if ($syschar(1) = "VAX_VMS")
  vidsprog|ru=(async-process, VIDSJOB),stdout=tt:|
else
  vidsprog|ru=(async-process, VIDSJOB)|
end-if
let _onfail="Goto end"
recvar job=VIDSJOB
let $vidsflg="READY"
let _onfail="continue"
vidsversion		! Print out the VIDS version information
jgrab @device		! Grab the display device
vidslogon @device
end>
let $switch=swtchsav
return
abort>
let $switch=swtchsav
let $vidsflg="NOVIDS"
return
end-proc
.title
VIDS - Initiate a VIDS session
.help
The VIDS command is used to start a VIDS (VICAR Interactive Display
Subsystem) session.  Once the session is started, VIDS will wait in
the background for you to give it commands.  There is no restriction
on when you may give commands to VIDS; they may be issued just as
any VICAR command is issued.

Once VIDS has been started, it will remain active until you stop it
with the JSTOP command or until you exit from VICAR.  Only one VIDS
session per user may be active at a time.

To avoid command name conflicts with other packages, all VIDS
commands begin with the letter 'j'.  This is an arbitrary convention
that was chosen to avoid conflicts, because no other VICAR programs
began with the letter 'j', and because the letter 'j' is easy to 
type.

For a complete list of VIDS commands and further descriptions of the
capabilities of VIDS, see the VIDS User's Guide, or type the command
MENU VIDS at the VICAR prompt.
.level1
.vari device
Initial display device
for VIDS to use
.vari debug
Starts VIDS with the debugger.
Should not normally be used.
.level2
.vari device
The DEVICE parameter is a string specifying the name of the display
device to be used by VIDS.  The JGRAB command is used to select the
device.

Examples:

VIDS EPA1	- Start up VIDS using the display device EPA1
VIDS RMA0	- Start up VIDS using the display device RMA0
.vari debug
The DEBUG parameter starts VIDS up using the debugger.  Most users
should never use this parameter.

If you need to debug VIDS, you must do the following from DCL,
outside of VICAR:

$ define tae$app_input tt

This allows the debugger to get input from the terminal.  If you
didn't do this, VIDS would hang when you tried to start it up in
debug mode.  This PDF makes sure the logical name is defined before
allowing you to run in debug mode, though.

You also need a version of VIDSPROG (the VIDS program) that is compiled
and linked for debug, of course.
.end
