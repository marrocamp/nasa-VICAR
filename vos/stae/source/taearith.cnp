/******************************************************************************
 *	Copyright (c) 1990, 1991, National Aeronautics and Space Administration
 *	ALL RIGHTS RESERVED
 *
 *	The software (programs, data bases and/or documentation) on or in
 *	any media can not be reproduced, disclosed or used except under
 *	terms of the license between COSMIC and your organization.
 *****************************************************************************/

/*>>VAX/VMS<<*/
/*
 *	Integer and floating point arithmetic packages
 *
 *
 *	Change log:
 *	23-sep-83	Make function 'handler' static...palm
 *
 */
#include 	"stdh.inp"
#include	"taeconf.inp"
#include	ssdef			/* VAX/VMS SS$ codes		*/

#ifndef testmain

    GLOBAL COUNT v11flar = 0;		/* source version number	*/

    static CODE 	handler();

    GLOBAL CODE		fl_add();
    GLOBAL CODE		fl_div();
    GLOBAL CODE 	fl_mult();
    GLOBAL CODE 	fl_sub();
    GLOBAL CODE		int_add();
    GLOBAL CODE		int_div();
    GLOBAL CODE		int_mult();
    GLOBAL CODE		int_sub();
    CODE		trapcode;	/* module-wide trap return code	*/

/* fl_add - add two floating point numbers
 *
 * return SUCCESS/FAIL
 */
    FUNCTION CODE fl_add(in1, in2, out)

    TAEFLOAT		in1;		/* in: first number to multiply	*/
    TAEFLOAT		in2;		/* in: second number		*/
    TAEFLOAT		*out;		/* out: result			*/

    {
    return(fl_arith(in1, in2, '+', out));	/* trap handler may set trapcode */
    }


/* fl_arith - General arithmetic on two floating point numbers
 *
 * return SUCCESS/FAIL
 */
    FUNCTION CODE fl_arith(in1, in2, op, out)

    TAEFLOAT		in1;		/* in: first number to multiply	*/
    TAEFLOAT		in2;		/* in: second number		*/
    TEXT		op;		/* in: operator			*/
    TAEFLOAT		*out;		/* out: result			*/

    {
    TAEFLOAT		temp;

    lib$establish(handler);		/* setup catcher		*/
    lib$flt_under(&1);			/* enable underflow detection	*/
    trapcode = SUCCESS;			/* init for possible trap	*/
    if (op == '*')
    	temp = in1 * in2;		/* use local data to keep trap local */
    else if (op == '+')
    	temp = in1 + in2;
    else if (op == '-')
    	temp = in1 - in2;
    else if (op == '/')
    	temp = in1/in2;
    *out = temp;
    return(trapcode);			/* trap handler may set trapcode */
    }


/* fl_div - divide two floating point numbers
 *
 * return SUCCESS/FAIL
 */
    FUNCTION CODE fl_div(in1, in2, out)

    TAEFLOAT		in1;		/* in: first number to multiply	*/
    TAEFLOAT		in2;		/* in: second number		*/
    TAEFLOAT		*out;		/* out: result			*/

    {
    return(fl_arith(in1, in2, '/', out));	/* trap handler may set trapcode */
    }


/* fl_mult - multiply two floating point numbers
 *
 * return SUCCESS/FAIL
 */
    FUNCTION CODE fl_mult(in1, in2, out)

    TAEFLOAT		in1;		/* in: first number to multiply	*/
    TAEFLOAT		in2;		/* in: second number		*/
    TAEFLOAT		*out;		/* out: result			*/

    {
    return(fl_arith(in1, in2, '*', out));	/* trap handler may set trapcode */
    }


/* fl_sub - subtract two floating point numbers
 *
 * return SUCCESS/FAIL
 */
    FUNCTION CODE fl_sub(in1, in2, out)

    TAEFLOAT		in1;		/* in: first number to multiply	*/
    TAEFLOAT		in2;		/* in: second number		*/
    TAEFLOAT		*out;		/* out: result			*/

    {
    return(fl_arith(in1, in2, '-', out));	/* trap handler may set trapcode */
    }

/* int_add - add two integer numbers
 *
 * return SUCCESS/FAIL
 */
    FUNCTION CODE int_add(in1, in2, out)

    TAEINT		in1;		/* in: first number to multiply	*/
    TAEINT		in2;		/* in: second number		*/
    TAEINT		*out;		/* out: result			*/

    {
    return(int_arith(in1, in2, '+', out));	/* trap handler may set trapcode */
    }


/* int_arith - General arithmetic on two integer numbers
 *
 * return SUCCESS/FAIL
 */
    FUNCTION CODE int_arith(in1, in2, op, out)

    TAEINT		in1;		/* in: first number to multiply	*/
    TAEINT		in2;		/* in: second number		*/
    TEXT		op;		/* in: operator			*/
    TAEINT		*out;		/* out: result			*/

    {
    TAEINT		temp;

    lib$establish(handler);		/* setup catcher		*/
    lib$int_over(&1);			/* enable overflow detection	*/
    trapcode = SUCCESS;			/* init for possible trap	*/
    if (op == '*')
    	temp = in1 * in2;		/* use local data to keep trap local */
    else if (op == '+')
    	temp = in1 + in2;
    else if (op == '-')
    	temp = in1 - in2;
    else if (op == '/')
    	temp = in1/in2;
    *out = temp;
    return(trapcode);			/* trap handler may set trapcode */
    }


/* int_div - divide two integer numbers
 *
 * return SUCCESS/FAIL
 */
    FUNCTION CODE int_div(in1, in2, out)

    TAEINT		in1;		/* in: first number to multiply	*/
    TAEINT		in2;		/* in: second number		*/
    TAEINT		*out;		/* out: result			*/

    {
    return(int_arith(in1, in2, '/', out));	/* trap handler may set trapcode */
    }


/* int_fl2i - convert a floating point to an integer
 *
 * We need a fn to do this because we watch out for overflow
 *
 * return SUCCESS/FAIL
 */
    FUNCTION CODE int_fl2i(fl, intgr)

    TAEFLOAT		fl;		/* in: the floater		*/
    TAEINT		*intgr;		/* out: the integer		*/

    {
    TAEINT		temp;

    lib$establish(handler);		/* setup catcher		*/
    lib$int_over(&1);			/* enable overflow detection	*/
    trapcode = SUCCESS;			/* init for possible trap	*/
    temp = fl;
    *intgr = temp;
    return(trapcode);
    }    

/* int_mult - multiply two integer numbers
 *
 * return SUCCESS/FAIL
 */
    FUNCTION CODE int_mult(in1, in2, out)

    TAEINT		in1;		/* in: first number to multiply	*/
    TAEINT		in2;		/* in: second number		*/
    TAEINT		*out;		/* out: result			*/

    {
    return(int_arith(in1, in2, '*', out));	/* trap handler may set trapcode */
    }


/* int_sub - subtract two integer numbers
 *
 * return SUCCESS/FAIL
 */
    FUNCTION CODE int_sub(in1, in2, out)

    TAEINT		in1;		/* in: first number to multiply	*/
    TAEINT		in2;		/* in: second number		*/
    TAEINT		*out;		/* out: result			*/

    {
    return(int_arith(in1, in2, '-', out));	/* trap handler may set trapcode */
    }



/* handler - trap/fault handler
 *
 * handler sets trapcode to FAIL on floating-point overflow fault, 
 * floating-point underflow, or integer overflow.
 *
 * Otherwise, it resignals.
 *
 * handler is pointed to via a lib$establish (VMS lib service)
 *
 * Note: Hardware only delivers 'faults', never 'traps'.
 *       To prevent repeat of the instruction at the same PC, we must
 *	 convert to a floating point trap.  In addition, because sim_trap()
 *	 puts a -0 into the value, we get a "reserved operand" fault,
 *	 which we must handle.
 */
    FUNCTION static int handler(sigargs, mechargs)

    int			*sigargs;
    int 		*mechargs;

    {
    int 	lib$match_cond();
    int		lib$sim_trap();
    int 	code, i, out;
    static float zero = 0;
    static int ssfltovff =  SS$_FLTOVF_F;	/* floating pt overflow fault   */
    static int ssfltovf = SS$_FLTOVF;		/* overflow trap    		*/
    static int ssfltundf =  SS$_FLTUND_F;	/* floating pt underflow fault   */
    static int ssfltund = SS$_FLTUND;		/* underflow trap    		*/
    static int ssroprand =  SS$_ROPRAND;	/* reserved operand 		*/
    static int ssintovf = SS$_INTOVF;		/* integer overflow trap	*/

    out = SS$_CONTINUE;
    i = lib$match_cond(&sigargs[1], &ssfltovff, &ssfltovf, 
    				    &ssfltundf, &ssfltund,
    				    &ssintovf,
    				    &ssroprand);
    if (i == 1 || i == 3 )			/* fault */
    	{
    	lib$sim_trap(sigargs, mechargs);
    	}
    else if (i == 2 || i == 4 || i == 5) 	/* trap, let it go  */
    	trapcode = FAIL;
    else if (i == 6)		/* reserved operand trap   */
    	lib$fixup_flt(sigargs, mechargs, &zero);	/* fix up reserved -0 */
    else
    	out = SS$_RESIGNAL;  	/* unknown	  */
    return(out);
    }


#else

    main()
    {
    float r1, r2, out;
    CODE code;
    IMPORT int handler();			/* flt overflow handler		*/
    

    printf("Floating pt multiply trap test, version 1\n");
    printf(" Enter two numbers> ");
    scanf("%f , %f", &r1, &r2);
    while ( r1 != -1)	/* exit on -1				*/
    	{
    	printf("inputs: %e,  %e\n", r1, r2);
        code = fl_mult(r1, r2, &out);    
    	printf("code = %d, output = %e\n", code, out);
    	printf(" Enter two numbers> ");
    	scanf("%f , %f", &r1, &r2);
    	}
    return(1);
    }

#endif    
