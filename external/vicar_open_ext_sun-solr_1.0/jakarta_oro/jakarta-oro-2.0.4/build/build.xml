<?xml version="1.0"?>
<!-- $Id: build.xml,v 1.14 2001/07/25 19:01:35 dfs Exp $ -->

<project name="Jakarta-ORO" default="jar" basedir=".">

  <property name="Name" value="Jakarta-ORO"/>
  <property name="year" value="2001"/>
  <property name="version" value="2.0.4"/>
  <property name="project" value="jakarta-oro"/>
  <property name="top.dir" value=".."/>
  <property name="code.src" value="${top.dir}/src"/>
  <property name="build.src" value="${top.dir}/src/java"/>  
  <property name="build.dest" value="${top.dir}/classes"/>
  <property name="build.tests" value="${build.dest}/tests"/>

  <property name="javadoc.destdir" value="${top.dir}/docs/api"/>
  <property name="final.name" value="${project}-${version}"/>
  <property name="final.dir" value="${top.dir}/${final.name}"/>
  <property name="debug" value="off"/>
  <property name="optimize" value="on"/>
  <property name="deprecation" value="off"/>
  <property name="ant.home" value="."/>
  <property name="docs.src" value="${top.dir}/xdocs"/>
  <property name="docs.dest" value="${top.dir}/docs"/>

    <!-- prepare target.  Creates build directory. -->

    <target name="prepare">
        <mkdir dir="${build.dest}"/>
        <mkdir dir="${build.tests}"/>
        <mkdir dir="${docs.dest}"/>
        <available classname="org.apache.velocity.anakia.AnakiaTask"
                   property="AnakiaTask.present"/>
        <chmod perm="ugo+x" file="${top.dir}/build/bin/antRun"/>
    </target>

    <target name="prepare-error" depends="prepare"
     unless="AnakiaTask.present">
       <echo>
        AnakiaTask is not present! Please check to make sure that 
        velocity.jar is in your classpath.
       </echo>
    </target>

    <!-- lib target.  Compiles the library classes only -->

    <target name="lib" depends="prepare">
        <javac srcdir="${build.src}"
            destdir="${build.dest}"
            excludes="examples/**,tools/**"
            debug="${debug}"
            deprecation="${deprecation}"
            optimize="${optimize}"/>
    </target>

    <!-- examples target.  Compiles the example classes. -->

    <target name="examples" depends="prepare,lib">
        <javac srcdir="${build.src}/examples"
        excludes="awk/**"
            destdir="${build.dest}"
            debug="${debug}"
            deprecation="${deprecation}"
            optimize="${optimize}"/>
    </target>

    <!-- awk-examples target.  Compiles the example classes. -->

    <target name="examples-awk" depends="prepare,lib">
        <javac srcdir="${build.src}/examples/awk"
            destdir="${build.dest}"
            debug="${debug}"
            deprecation="${deprecation}"
            optimize="${optimize}"/>
    </target>

    <!-- tools target.  Compiles the tool classes. -->

    <target name="tools" depends="prepare,lib">
        <javac srcdir="${build.src}/tools"
            destdir="${build.dest}"
            debug="${debug}"
            deprecation="${deprecation}"
            optimize="${optimize}"/>
    </target>
    
    <!-- tests target.  Compiles and runs the unit tests. -->

    <target name="tests" depends="prepare,lib">
        <javac srcdir="${build.src}/tests"
            destdir="${build.tests}"
            debug="${debug}"
            deprecation="${deprecation}"
            optimize="${optimize}"/>
    </target>

    <!-- jar target.  Compiles the source directory and creates a .jar file -->

    <target name="jar" depends="lib">
        <jar jarfile="${top.dir}/${final.name}.jar"
            basedir="${build.dest}"
            includes="org/**"
            excludes="**/package.html,**/overview.html"/>
    </target>

    <!-- javadocs target.  Creates the API documentation -->

    <target name="javadocs" depends="prepare">
        <mkdir dir="${javadoc.destdir}"/>
        <javadoc packagenames="org.apache.oro.io,org.apache.oro.text,org.apache.oro.text.regex,org.apache.oro.text.awk,org.apache.oro.text.perl,org.apache.oro.util"
            sourcepath="${build.src}"
            destdir="${javadoc.destdir}"
            overview="${build.src}/org/apache/oro/overview.html"
            author="true"
            version="true"
            windowtitle="${Name} ${version} API"
            doctitle="${Name} ${version} API"
            header="&lt;a href=&apos;http://jakarta.apache.org/oro/&apos; target=_top&gt;&lt;img src=&apos;{@docroot}/../images/logoSmall.gif&apos; alt=&apos;Jakarta ORO&apos; width=48 height=47 align=center border=0 hspace=1 vspace=1&gt;&lt;/a&gt;"
            bottom="Copyright &#169; ${year} Apache Software Foundation. All Rights Reserved.">
    </javadoc>
    <replace file="${javadoc.destdir}/overview-frame.html"
                 token="{@docroot}" value="."/>
    <replace dir="${javadoc.destdir}" includes="**/*.html"
                 token="@version@" value="${version}"/>
    </target>

    <!-- docs target.  Creates project web pages and documentation. -->
    <target name="docs" depends="prepare-error,lib,examples"
        if="AnakiaTask.present">
        <taskdef name="anakia" classname="org.apache.velocity.anakia.AnakiaTask"/>
        <anakia basedir="${docs.src}" destdir="${docs.dest}/"
        extension=".html" style="./site.vsl"
        projectFile="stylesheets/project.xml"
        excludes="**/stylesheets/** manual/** empty.xml"
        includes="**/*.xml"
        lastModifiedCheck="true"
        templatePath="${jakarta-site2.dir}/xdocs/stylesheets">
        </anakia>

        <copy todir="${docs.dest}/images" filtering="no">
            <fileset dir="${docs.src}/images">
                <include name="**/*.gif"/>
                <include name="**/*.jpeg"/>
                <include name="**/*.jpg"/>
            </fileset>
        </copy>

        <mkdir dir="${docs.dest}/classes"/>
        <copy todir="${docs.dest}/classes" filtering="no">
            <fileset dir="${build.dest}">
                <include name="MatcherDemoApplet.class"/>
            </fileset>
        </copy>
        <mkdir dir="${docs.dest}/classes/org"/>
        <copy todir="${docs.dest}/classes/org" filtering="no">
            <fileset dir="${build.dest}/org">
                <include name="**/*.class"/>
            </fileset>
        </copy>
    </target>

    <!-- package target -->

    <target name="package" depends="jar,javadocs,docs">
        <mkdir dir="${final.dir}"/>
        <copy todir="${final.dir}/src">
            <fileset dir="${code.src}"/>
        </copy>
	<!-- BEGIN_REMOVE_THIS -->
	<!-- Remove this when there's a first draft of the manual. -->
        <copy todir="${final.dir}/docs">
            <fileset dir="${docs.dest}">
              <exclude name="manual/**"/>
	    </fileset>
        </copy>
	<!-- END_REMOVE_THIS -->
        <copy todir="${final.dir}/build">
            <fileset dir="${top.dir}/build">
              <exclude name="velocity.log"/>
	      <!-- BEGIN_REMOVE_THIS -->
              <!-- Remove this when there are some unit tests. -->
              <exclude name="junit-3.7.jar"/>
	      <!-- END_REMOVE_THIS -->
            </fileset>
        </copy>

        <copy file="${top.dir}/LICENSE" tofile="${final.dir}/LICENSE"/>
        <copy file="${top.dir}/BUGS" tofile="${final.dir}/BUGS"/>
        <copy file="${top.dir}/CHANGES" tofile="${final.dir}/CHANGES"/>
        <copy file="${top.dir}/COMPILE" tofile="${final.dir}/COMPILE"/>
        <copy file="${top.dir}/CONTRIBUTORS"
              tofile="${final.dir}/CONTRIBUTORS"/>
        <copy file="${top.dir}/README" tofile="${final.dir}/README"/>
        <copy file="${top.dir}/STYLE" tofile="${final.dir}/STYLE"/>
        <copy file="${top.dir}/TODO" tofile="${final.dir}/TODO"/>
        <copy file="${top.dir}/${final.name}.jar" tofile="${final.dir}/${final.name}.jar"/>
        <chmod perm="ugo+rx" file="${final.dir}/build/build.sh"/>
    </target>

    <!-- package-zip target.  Packages the distribution with ZIP -->

    <target name="package-zip" depends="package">
        <zip zipfile="${top.dir}/${final.name}.zip" basedir="${top.dir}/"
             includes="**/${final.name}/**" excludes="**/.cvsignore"/>
    </target>
    
    <!-- Packages the distribution with TAR-GZIP -->

    <target name="package-tgz" depends="package">
        <tar tarfile="${top.dir}/${final.name}.tar"
             basedir="${top.dir}" excludes="**/**">
          <tarfileset dir="${final.dir}/.." mode="755">
            <include name="${final.name}/build/build.sh"/>
            <include name="${final.name}/build/bin/antRun"/>
          </tarfileset>
          <tarfileset dir="${final.dir}/..">
            <include name="${final.name}/**"/>
            <exclude name="${final.name}/build/build.sh"/>
            <exclude name="${final.name}/build/bin/antRun"/>
            <exclude name="**/.cvsignore"/>
          </tarfileset>
        </tar>
        <gzip zipfile="${top.dir}/${project}-${version}.tar.gz" src="${top.dir}/${project}-${version}.tar"/>
    </target>
    
    <!-- Packages the distribution with ZIP and TAG-GZIP -->

    <target name="package-all" depends="package-zip, package-tgz">
    </target>

    <!-- Makes an attempt to clean up a little. -->

    <target name="clean">
        <delete dir="${build.dest}"/>
        <delete dir="${javadoc.destdir}"/>
        <delete dir="${final.dir}"/>
        <!-- Remove this if any source documents ever reside in docs.dest. -->
        <delete dir="${docs.dest}"/>
        <delete file="${top.dir}/${final.name}.jar"/>
        <delete file="${top.dir}/${final.name}.tar"/>
        <delete file="${top.dir}/${final.name}.tar.gz"/>
        <delete file="${top.dir}/${final.name}.zip"/>
    </target>
</project>
