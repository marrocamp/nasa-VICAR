LVTool Release Notes

---------------------------------------------------------------------------
Version 2.20 June 2007

Updates:

- Recognizing aliases when they are part of an object name. 
  For example, PARMS is an alias to PARAMETERS as defined in the PSDD.
  If a GROUP has a name of JPL_PARMS and aliasing is turned on, then
  JPL_PARMS will be replaced by JPL_PARAMETERS. 

- Removed LVTool's need to create a scratch file (temporary file) in a
  Windows environmnent. This eliminates the write error message users
  would see when running the tool in an environment with limited
  privileges. 

- Handling the special cases in COLUMN and BIT_COLUMN objects as
  described in the Standards Reference. If ITEMS is found within a
  COLUMN or BIT_COLUMN object, then BYTES and BITS, respectively, is not a
  required keyword.

Fixes:

- Properly handling 2-Dimensional sequences

- 'Gracefully' handling a malformed number in exponential format
  (Example: 1E+30)

- Making sure that it would not report a keyword as not being in the
  dictionary when in reality, it was there (Example: ABSTRACT_DESC) 

- Modified the lvtool reporting to not throw the message, 
  'Inconsistent data type.  (Value should be of type REAL or INTEGER)', 
  for values whose keyword cannot be found in the data dictionary.

-------------------------------------------------------------------------------
Version 2.19  March 2006

Added the capability to search for pointers to files for these additional
objects: HEADER, QUBE, IMAGE, SPREADSHEET, SERIES, SPECTRUM, and PALETTE. 

NOTE: When validating volumes, it is required that the -b3 flag be 
      specified so that LVTOOL can properly search for non-STRUCTURE pointer
      files.
      
i.e. c:\lvtool> lvtool -v -d pdsdd.idx -r d:\mgst_1373\*.* -b3 d:\mgst_1373

Made a fix to correctly print the validation results to the user screen when
the -t flag is used. LVTOOL was originally crashing during label validation
with the -t flag set.

Made a bug fix to correctly handle local data dictionary keywords of 61
characters long (30 for the namespace ID, 30 for the element name, and 1 for
the colon that separates the two). Previous version assumed a 60 character max
length for local keywords.

Because of changes made to the ODLC library, if during validation, an overflow
occurs while obtaining a keyword integer value, LVTOOL will tell the user what
value it will be set to. Before it just said, "will set to the maximum postive
value" without telling the user what that max value was.

Made a fix to always print out to the report, the hierarchy of objects in a
label, regardless of whether or not the -a flag was set. Previous versions
only printed out the hierarchy when the -a flag was set.

Made a change to the LVTOOL reporting system to only mention in the report
that we are expanding STRUCTURE pointer files IF there was a STRUCTURE pointer
file found in the first place.

Example:

Before we would have,


  ------------------------------------------------------------------------
  Expanding ^STRUCTURE pointers in c:\TEST_PRODUCTS\TABLES\3277281A.LBL

     STUCTURE keyword not found, label was not expanded




     >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
     >                                                                      <
     #     c:\TEST_PRODUCTS\TABLES\3277281A.LBL                             <
     >                                                                      <
     <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<


Now it would simply say,


     >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
     >                                                                      <
     #     c:\TEST_PRODUCTS\TABLES\3277281a.lbl                             <
     >                                                                      <
     <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<


with no mention of attempting to expand the label file. This avoids confusion
of thinking that something was wrong with the label.


KNOWN ISSUES
============

* The parser used by LVTOOL cannot handle 2-Dimensional sequences yet.

* LVTOOL has a problem handling strings that start with an integer

* Keyword lengths greater than the 30 character limit are not notified
  to the user. Same bug applies to the namespace ID and data element name
  of a locally-defined elements.

* The aliasing feature may produce "funny" results. This has been most
  recently reported when a label contains the keyword AXIS_NAME. Fix is
  scheduled for next release.

* There is a known anomaly regarding LVTOOL's ability to handle sequences.
  When a label contains a sequence of standard keyword values, LVTOOL will
  complain about those values not being part of the standard value set when
  they really are.

    Example:

    If you have in a label,

    SUFFIX_NAME              = ("EMISSION ANGLE", "INCIDENCE ANGLE")

    LVTOOL will print out a message like so,

    1    WARNING: Line 73 -- SUFFIX_NAME:  Sequence or set value is not a
    2                        standard value: EMISSION ANGLE INCIDENCE ANGLE

  when those values are part of the standard value set in the data
  dictionary. Please ignore this message for the time being until a proper
  solution can be worked out.


* For Solaris and Linux systems, LVTOOL does not know how to interpret
  relative path names correctly and will not be able to properly search for
  STRUCTURE pointer files. 

    i.e. If LVTOOL is executed down a directory tree like so,

  [/home/dschultz/pds_toolbox/bin/]> ./lvtool -f label.lbl -e -r report.txt

  and if label.lbl contains a STRUCTURE pointer to a .fmt file and this .fmt
  file is located in the LABEL directory located at a higher level, then
  LVTOOL will not go up the tree and find the pointer file. This will get
  fixed for the next version. The workaround is to specify the full path to
  the label file.


PORTABILITY ISSUES
==================

When an integer is either too large or too small to handle, LVTOOL will not
always give this warning message out to the report depending on what platform
LVTOOL is being executed on. 


i.e. WARNING: Line 25 -- Magnitude of integer number is too large.  The
                         number has been set to the maximum positive value of
                         2147483647.

During regression testing, this message would be seen on a report in linux
and not on a report in solaris or windows when LVTOOL was run with the same
label on all 3 platforms.
                     

-----------------------------------------------------------------------------
Version 2.18     July 2005

Added a software disclaimer message to the usage screen

Made the program backwards compatible to where the -d option would still take
in the pdsdd.idx file as it always has. This time however, LVTOOL now gives
the user the option to input either the pdsdd.idx file or the pdsdd.full
file. If the full file is desired, you will need to use the -df option
instead of the -d option like so,

lvtool -df c:\data\pdsdd.full

LVTOOL uses the MAKE INDEX program (version 1.7 or higher) to create the
data dictionary index file in this case. Because of this dependency, you must
make sure that the MAKE INDEX program is in the same directory as the LVTOOL
program or that the PATH environment is set properly to where the MAKE INDEX
program can be located.

-----------------------------------------------------------------------------
Version 2.17     May 2005

Fixed a bug to prevent program crash when a keyword value is longer than 250
characters

Made a bug fix to correctly exclude a file from being validated if it is in
one of the user-specified directories to be excluded from processing.

Made change to not check for an END statement at the end of a format file.
END statements are not required in format files.

Fixed a bug in the code where lvtool couldn't find pointers to files for
labels validated from a CD were expanded.

lvtool will now properly look for pointer files in a PDS volume if a
pointer is encountered in a file. It will recursively search up a directory
tree and find the appropriate direcotries. The PDS standards state which
directories these pointers to files should be located in a PDS volume. For
example, DESCRIPTION pointer keywords would be found in the DOCUMENTS
directory.

----------------------------------------------------------------------------
Version 2.16     March 2005

Re-compiled due to change in ODL Library

Changes for this version:

LVTOOL will now create the data dictionary index file internally.
Historically, the user would need to specify the data dictionary index file
on the command-line. Now, the user must input the data dictionary full file. 

i.e. lvtool -d c:\data\pdsdd.full ...

The data dictionary index file is deleted from the user's system upon
completion of program.

IMPORTANT NOTE
LVTOOL uses the MAKE INDEX program to create the data dictionary index file.
Because of this, the user must make sure that the MAKE INDEX program is in
the same directory as the LVTOOL program or that the PATH environment is set
properly to where the MAKE INDEX program is located. 


Additional changes include:

Added a new option, -se, that will save the temporary files that lvtool
creates onto hard drive when it needs to expand a label with STRUCTURE
pointers 

lvtool now checks, by default, if a file is a label or not. Users can turn
this feature off by specifying "-nol3d" on the command-line. Historically,
users had to turn this feature ON with the "-l3d" option.

Fixed a memory leak that occurs when label files are expanded and a temporary
file is created
        
       
-----------------------------------------------------------------------------
Version 2.15       September 10, 2004
        Changes for this version:
        
        Fixed a small bug where in Solaris and Linux, when a file is
        inputted as "../file_name.lbl" and the user wants to expand the file
        with the "-e" option, lvtool would create a temp file called ".x00" 
        instead of "<file_name>.x00".
        
-----------------------------------------------------------------------------
Version 2.14
        Changes for this version:

        As a result of changes to the ODL library, lvtool will now be able
        to accept labels that contain a unit ID value with "NULL". 
        i.e. KEYWORD = "NULL" <km>

	Change to code was made to allow lvtool to handle local data dictionary
	keywords whose length is greater than 30 characters long. 

        Fixed program to correctly look for directories to exclude if that
        option was set
        
        Fixed bug to properly find a keyword in the data dictionary whose
        length is more than 31 characters long
        
-----------------------------------------------------------------------------                
Version 2.13 June 2003
	Changes for this version:
	    This is a recompile due to changes in ODLC

-----------------------------------------------------------------------------
Version 2.12   February 19, 2003
	Michael Cayanan/Jet Propulsion Laboratory


	New flag options added to lvtool:
	
	1) -nwarn         : Warning messages will not be written to the output
	                    file during label processing. Default is that lvtool
	                    will output these warning messages if this flag is
	                    ignored.
			    
	2) -ninfo	  : Info messages will not be written to the output file during
	              label processing. Default is that lvtool will write these
	              messages to the output file if this flag is ignored.
	
	3) -max value	  : A user now has the ability to control the maximum amount
	              of error messages that will be written to an output file.
	              Default is 300 if this flag is ignored. "value" is an
			          integer value that is given after entering this flag. 
			    
NOTE: This flag means maximum amount of error messages per label file. For
example, if you enter "-max 2" and you allow lvtool to look at more than 1
file, it will go through the first file and output a maximum of 2 error
messages, goes on to the next file then outuputs a maximum of 2 error
messages, and so forth.
	
	
The help description for lvtool has been updated as well that describes
these new flags.
				    
The message "No SFDU labels were found in this file" has been removed. 
Lvtool will still validate SFDU labels if they are found, otherwise it
will not complain about not finding it like in previous versions of this
tool. 
	
The message "WARNING...Using PDS GENERIC object definition" has been
changed to "INFO...Using PDS GENERIC object definition."
	
	
A warning message was changed in lvtool to be more 'helpful.' Before, 
lvtool would output a message such as the following, "WARNING: 
Line 11 -- MISSION_PHASE_NAME:  PRIMARY_MISSION, Standard value is:
PRIMARY MISSION"	
	
Now, lvtool will output this same warning message as follows,
"WARNING: Line 11 -- MISSION_PHASE_NAME:  PRIMARY_MISSION, Standard value
 is: MISSION_PHASE_NAME:  PRIMARY MISSION, (GEN_DATA_TYPE=IDENTIFIER)"
	
	
IMPORTANT:
When compiling lvtool under windows, linux or solaris, be sure to define
LV_TOOL. In addition, lvtool uses the ODL library, which has undergone some
changes specifically made for lvtool. Therefore, when compiling the ODL
library for use with lvtool, be sure to define LV_TOOL as well.Version 2.0	  
Added the -s option.  This option replaces the program SLVTOOL.  It provides
a summary report instead of the normal itemized report.  The default for
lvtool is to provide the detailed report, the -l option.

Version 2.11   December 12, 2002
	changed units checking code.  

Version 2.9
	NOTE				  NOTE					NOTE  
	BE SURE TO DOWNLOAD A NEW DATA DICTIONARY FROM
	
	
	
	In the past underscores in some keyword values have generated the
	following warning message:
	
	1    WARNING: Line 4 -- RECORD_TYPE:  FIXED_LENGTH, Standard value is:
	2                       FIXED LENGTH
	
	To prevent this from happening a number of changes have been made to the
	data dictionary as well as to LVTOOL.  The change is that the
	GENERAL_DATA_TYPE has been changed from CHARACTER to IDENTIFIER for 
	some objects.
	
	This means that when a label references an object in the data dictionary
	that has GENERAL_DATA_TYPE = IDENTIFIER with  a standard value that
	contains an underscore then the keyword in the label must have a keyword
	value that contains an underscore but not spaces and may be either quoted
	or unquoted.  If the standard value contains a space then the keyward
	value must contain a space and be quoted.
	
	EXAMPLE:  For a RECORD TYPE keyword in a label acceptable values are
	 "FIXED_LENGTH" and FIXED_LENGTH. Unacceptable values are "FIXED LENGTH"
	 and FIXED LENGTH.
	
	The following OBJECTS were changed in the data dictionary:
	
	APERTURE_TYPE				MEDIUM_FORMAT
	AXIS_ORDER_TYPE				METEORITE_SUB_TYPE
	BAND_STORAGE_TYPE			NOISE_TYPE
	BIT_DATA_TYPE				OBJECT_TYPE
	CHANNEL_ID				OBSTRUCTION_ID
	CMPRS_QUANTZ_TBL_ID			OPTIONAL_OBJECT_SET
	COMMAND_DESC				PDS_VERSION_ID
	CONTAMINATION_ID			PEER_REVIEW_DATA_SET_STATUS
	COORDINATE_SYSTEM_ID			PEER_REVIEW_ROLE
	CORE_ITEM_TYPE				PLATFORM
	CYCLE_ID				POSITIVE_LONGITUDE_DIRECTION
	DATA_FORMAT				PROCESSING_LEVEL_ID
	DATA_OBJECT_TYPE			PRODUCT_TYPE
	DATA_PATH_TYPE				RECORD_TYPE
	DATA_QUALITY_ID				RETICLE_POINT_NUMBER
	DATA_SET_COLLECTION_ID			RING_OCCULTATION_DIRECTION
	DATA_SET_ID				ROTATION_DIRECTION
	DATA_SOURCE_ID				SAMPLE_DISPLAY_DIRECTION
	DATA_STREAM_TYPE			SAMPLE_TYPE
	DATA_TYPE				SCAN_MODE_ID
	DETECTOR_ID				SECTION_ID
	DETECTOR_PIXEL_WIDTH			SOFTWARE_LICENSE_TYPE
	DETECTOR_TYPE				SOFTWARE_PURPOSE
	DISPERSION_MODE_ID			SOFTWARE_TYPE
	EARTH_BASE_ID				SOURCE_DATA_SET_ID
	ELECTRONICS_ID				SPACECRAFT_ID
	EXPOSURE_TYPE				SPACECRAFT_OPERATING_MODE_ID
	FEATURE_TYPE				SPACECRAFT_OPERATIONS_TYPE
	FRAME_ID				SQL_FORMAT
	FTP_FILE_FORMAT				STANDARD_VALUE_TYPE
	FTP_SITE_ID				SUFFIX_ITEM_TYPE
	GAIN_MODE_ID				SURFACE_BASED_INST_METHOD
	GENERAL_CLASSIFICATION_TYPE		SYSTEM_BULLETIN_TYPE
	GENERAL_DATA_TYPE			SYSTEM_CLASSIFICATION_ID
	HARDWARE_MODEL_ID			TARGET_TYPE
	HEADER_TYPE				TECHNICAL_SUPPORT_TYPE
	ICT_ZIGZAG_PATTERN			TELEMETRY_FORMAT_ID
	IMAGE_OBSERVATION_TYPE			TELESCOPE_ID
	INDEX_TYPE				TWIST_ANGLE_TYPE
	INSTRUMENT_AZIMUTH_METHOD		VECTOR_COMPONENT_ID
	INSTRUMENT_DEPLOYMENT_STATE		VECTOR_COMPONENT_ID_1
	INSTRUMENT_HOST_ID			VECTOR_COMPONENT_ID_2
	INSTRUMENT_ID				VECTOR_COMPONENT_ID_3
	INSTRUMENT_MODE_ID			VECTOR_COMPONENT_TYPE
	INTERCHANGE_FORMAT			VOLUME_FORMAT
	KERNEL_TYPE				VOLUME_ID
	LINE_DISPLAY_DIRECTION		VOLUME_SET_ID

Version 2.8
	Program now validates groups.
  
	Compiling LVTOOL
	SOLARIS

 	Read the Makefile that comes with the SOLARIS download.  You either have
 	to modify the Makefile paths to match your environment or you will have
 	to create an environment that matches the Makefile.  This Makefile does
 	NOT assume that the source files, the Makefile, and the binary file are
 	all in the same directory.  While this Makefile will make a number of PDS
 	tools only the source for lvtool, kwvtool, ddict, and make_index are
 	supplied.
	
	WINDOWS Microsoft Visual C++
	Create a Console Project for lvtool.  In the Project Settings, C/C++ tab
	be sure to define MSDOS_TC and IBMPC_TOOLBOX.
	
	LINUX
	
Version 2.6
	Code was ported to LINUX.  A number of minor bugs were fixed, most
	conserned dealing with underlines keywords and keyword values.
	  
Version	2.5m 
	Added a new option to allow a file containing a list of files to be
	validated/verified to be used as input to LVTOOL instead listing one or
	more files with the -f option or wild carding files with the -f option.
	This new option is -fin and the format is -fin <file> where <file> is the
	name of the file containing the list of file names.  The file can be
	created with any editor or word processor that can create a simple text
	file.  There will be one file name per line, and each file name shall
	contain the complete path.  There is no limit to the number of lines the
	file may contain.  The names must all be upper case.  The file contents
	will look like this:
	
	C:\LVTEST\TEST1.LBL
	C:\LBLDIR\TEST2.LBL
	C:\DATA\TEST3.LBL

 	Added FORMATION to standard val type choices in function
 	dd_get_standard_values which is in ddaccess.c

Version 2.5l
	When executing LVTOOL with an incorrect parameter, a missing required
	parameter, or no parameters at all the program lists all of the
	acceptable and required parameters to the display.  There are too many 
	parameters to fit on the screen and they scrolled by so fast that they
	could not be read. For the Windows version these are now displayed one
	screen at a time.  The display will continue  in several seconds if left
	alone or will continue right away if a key is depressed.  A unix user 
	not using xwindows will still have to redirect the output to a file and
	review the file with MORE  or an editor.

Version 2.5k
	Added a new option to direct LVTOOL to not validate a file which does not
	appear to contain a level 3 label.  This option is -l3d.

Version	08-12-99  2.5j     
 	Added a new option to direct LVTOOL to ignore files in specified
 	directories.  The option is -ivd, the format is -ivd <file> where <file>
 	is the name of the file containing the directory list.  The file can be
 	created with any editor or word processor that can create a simple text 
 	file.  The directories are listed in a single line up to 200 characters
 	in length, are upper case, and are comma seperated.  The line will look
 	like this:
        
        H:\SOFTWARE,H:\DATA

Version 2.5i
        bug fix

Version 2.5.h
	05-13-99   added alt_rpt_format_messages to handle writing messages with
	no wrapping, code cleanup only.        

Version 2.5g
        05-13-99 Added check to VERLABEL.C to handle CATALOG with pointers
        instead of KEYWORDS      

Version 2.5f
        bug fix

Version	2.5d 12/11/98
	Added a new option to direct LVTOOL to not wrap error message.  LVTOOL
	printed messages that were wider than the display devices and wrapped them
	onto the next line.  This was making it difficult for Data Engineers to
	design software to analyze the LVTOOL output.  This feature  is enabled by
	the -nw option.
	
	Also added in the version and not controlled by the -nw option is line
	numbering of the error messages.  The first line of each message is
	numbered 1, the next line is 2, etc.  This was also done to facilitate the
	design of LVTOOL output analysis tools.

Version 2.5c
	Bug fix

Version	2.5b 7/21/98
	Added a new option to direct LVTOOL to ignore files that have specified
	extensions.  The option is -ivf <file>, the format is -ivf <file> where
	<file> is the name of the file containing the extension list.  The file
	can be created with any editor or word processor that can create a simple
	text file.  The extensions are listed in a single line up to 200
	characters in length, are upper case, and are comma seperated.  The line
	will look like this:
	
	C,FOR,PDF,PS,GIF,JPG

Version	2.5a
	LVTOOL now verifies labels and validate that when file pointers are used
	the files actually exist.
	To supress pointer verification and enable label validation specify -b1.
	To supress label validation and enable pointer verification specify -b2.
	If neither is specified both operations will be performed.
	If pointer verification is desired then you may want to specify where the
	search is to start.  If you do not specify the starting search directory,
	then the program will begin the search in your root directory.
	To specify the starting search directory use the -b3 option.  The format
	for this option is -b3 <path> where <path> is the complete path such as:

Version 2.5
	Buf fix in expand label section of program.  Program was not deleting work
	files.

Version 2.4
	Bug fix in lvtool section of program.
	
Version 2.3
	Bug fix in slvtool section of program.
	/usr/home/lvtool or H:

Version	2.2     
	LVTOOL normally will search all directories for files to verify when given
	wild cards for the -f option.  The new option, -di prevents the recursive
	directory search.  This option only works with the Windows version of
	LVTOOL and not the UNIX version.

Version	2.1     
	Added the -e option.  This option replaces the program EXPLAB.  -e will
	expand all ^STRUCTURE pointers, it will not expand other types of
	pointers.
